----------------------------------------------------------------------
-- Instructions --
-- Load this file into CoCoA: it will not run the tests, but it will:
--   LOAD all the examples
--   CHECK the path (for creating the files in the right directory)
--   PRINT a manual
----------------------------------------------------------------------

Define RunTests(Tests, Info)
  Source("$cocoa5");
  $cocoa5.Initialize();
  MEMORY.PKG.CoCoA5.PrintOnPath := GetEnv("PWD")+"/inputs";
  EnableSocket := MEMORY.PKG.CoCoA5.EnableSocket;
  MEMORY.PKG.CoCoA5.EnableSocket := False;
  MEMORY.TMP_CoCoA5_CreatingBenchmarks := True; -- To disable WARNING

  If Not IsDefined(Info.Char)       Then Info.Char:=32003; EndIf;
  If Not IsDefined(Info.O)          Then Info.O:="DegRevLex"; EndIf;
  If Not IsDefined(Info.Homogenize) Then Info.Homogenize:=True; EndIf;
  Run := True;
  
  If Info.Char=0 Then K:="Q" Else K:="Z/("+Sprint(Info.Char)+")"; EndIf;

  NameSuffix := "";
  If Info.Homogenize Then NameSuffix := NameSuffix + "h"; EndIf;
  If K = "Q" Then NameSuffix := NameSuffix + "Q"; EndIf;
  If Info.O<>"DegRevLex" Then 
    If Info.O = "DegLex" Then NameSuffix := NameSuffix + "DL"; 
    Elif Info.O = "Lex" Then NameSuffix := NameSuffix + "Lex"; 
    Elif "Mat(" IsIn Info.O Then NameSuffix := NameSuffix + "M";
    Else Error("RunTests: cannot use ordering "+Sprint(Info.O));
    EndIf;
  EndIf;
  If NameSuffix <> "" Then NameSuffix := "_" + NameSuffix; EndIf;

  Foreach T In Tests Do
    PrintLn T.Name+NameSuffix;
    Homog := "";
    If Info.Homogenize Then
      If Not IsDefined(T.IsHomog) Or T.IsHomog=False Then
	T.Indets := T.Indets + ", h";
	Homog := "I := Ideal([Homogenized(h,F) | F In Gens(I)]);"
      EndIf;
    Else
      If IsDefined(T.IsHomog) And T.IsHomog=True Then
	Run := False;
      EndIf;
    EndIf;
    If T.Operation IsIn ["Intersection5x", "Colon5x"] Then // 2 args
      Args := "I, J, ";
      Input := T.I + T.J;
    Else // 1 argument
      Args := "I, ";
      Input := T.I;
    EndIf;

    Info5 := Record[ExName := T.Name + NameSuffix];
    If Not IsDefined(T.ExtraInfo5) Then T.ExtraInfo5 := []; EndIf;
    Foreach EI In T.ExtraInfo5 Do
      Info5.Var(EI[1]) := EI[2];
    EndForeach;
    If IsDefined(Info5.OrdMat) Then Info.O := "Ord("+Sprint(Info5.OrdMat)+")"; EndIf;
    RingDecl := "Use " + K + "[" + T.Indets + "], " + Info.O + ";";
    Ex := "Catch X := " + T.Operation + "(" + Args + Sprint(Info5) + ") In E EndCatch;";
    Source(OpenIString("", RingDecl + Input + Homog + Ex));
    Source(OpenIString("", "If Not \"Sorry\" <=  GetErrMesg(E) Then Return E; EndIf;"));
  EndForeach;
  PrintLn "Done";
  MEMORY.TMP_CoCoA5_CreatingBenchmarks := False;
  MEMORY.PKG.CoCoA5.EnableSocket := EnableSocket;
EndDefine;


AllTests := [];

------------------------------------------------------------
-- 4x4 -- commute 4 (?)
  
T := Record(Name = "4x4");

T.Operation := "GBasis5x";

T.Indets := "a[1..4,1..4], b[1..4,1..4]";

T.I := "
S := 4;
M := Mat([[a[I,J]|I In 1..S]|J In 1..S]);
N := Mat([[b[I,J]|I In 1..S]|J In 1..S]);
MN := M*N-N*M;
I := Ideal(Flatten(Cast(MN,LIST)));
";

T.IsHomog := True;

Append(AllTests, T);

------------------------------------------------------------
-- GraphCol1 -- 
  
T := Record(Name = "GraphCol1");

T.Operation := "GBasis5x";

T.Indets := "x[1..15]";

T.I := "
  Define F(X)   Return X*(X-1)*(X+1);   EndDefine;
  EqNodi  := [ F(x[I]) | I In 1..15 ];
  Archi := [[1, 2], [1, 4], [1, 5], [1, 7], [1, 10],
            [2, 3], [2, 4], [2, 6], [2, 7], [2, 9],
            [3, 4], [3, 5], [3, 7], [3, 9],
            [4, 5], [4, 6], [4, 7], [4, 10], 
            [5, 6], [5, 8], [5, 9], [5, 12], [5, 13], 
            [6, 7], [6, 8], [6, 10],
            [7, 8], [7, 9], [7, 11], [7, 14], [7, 15],
            [8, 9], [8, 11], [8, 12], [8, 15],
            [9, 10]];
  EqArchi := [ (F(x[A[1]])-F(x[A[2]]))/(x[A[1]]-x[A[2]]) 
              |  A In Archi ];
  I := Ideal(EqNodi) + Ideal(EqArchi) + Ideal(x[1], x[2]-1);
";

T.IsHomog := False;

Append(AllTests, T);

------------------------------------------------------------
-- 6x7-4_Q 4x4 Minors of a generic 6x7 matrix

T := Record(Name = "6x7-4");

T.Operation := "GBasis5x";

T.Indets := "x[1..6,1..7]";

T.I := "
A := Mat([[x[I,J]| J In 1..7]| I In 1..6]);
I := Ideal(Minors(4,A));
";

T.IsHomog := True;

Append(AllTests, T);

------------------------------------------------------------
-- 2x2 Minors of a generic 7x8 matrix

T := Record(Name = "7x8-2");

T.Operation := "GBasis5x";

T.Indets := "x[1..7,1..8]";

T.I := "
A := Mat([[x[I,J]| J In 1..8]| I In 1..7]);
I := Ideal(Minors(2,A));
";

T.IsHomog := True;

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "arnold1");

T.Operation := "GBasis5x";

T.Indets := "x,y,z";

T.I := "
I := Ideal(
8*x^2*y^2+5*x*y^3+3*x^3*z+x^2*y*z ,
x^5+2*y^3*z^2+13*y^2*z^3+5*y*z^4 ,
8*x^3+24*y^3+x*z^2+3 ,
7*x^2*y^4+18*x*y^3*z^2+9*y^3*z^3);
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "arnold2");

T.Operation := "GBasis5x";

T.Indets := "x,y,z";

T.I := "
I := Ideal(
2*x*y^4*z^2+x^3*y^2*z-x^2*y^3*z+2*x*y*z^2+7*y^3+7 ,
2*x^2*y^4*z+x^2*y*z^2-x*y^2*z^2+2*x^2*y*z-12*x+12*y ,
2*y^5*z+x^2*y^2*z-x*y^3*z-x*y^3+y^4+2*y^2*z ,
3*x*y^4*z^3+x^2*y^2*z-x*y^3*z+4*y^3*z^2+3*x*y*z^2+4*z^2-x+y);
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "arnold3");

T.Operation := "GBasis5x";

T.Indets := "x,y,z";

T.I := "
I := Ideal( -4*x^11+5*x^3+1 ,
x^3*y^4-3*x*y+5*y+1 ,
4*x^2*z-3*z^2-4);
";

Append(AllTests, T);

-- //esempio 1 - coefficenti leggermente modificati
-- Use R::=QQ[xyzh];
-- I:=Ideal(8*x^2*y^2+5*x*y^3+3*x^3*z+x^2*y*z ,
-- x^5+2*y^3*z^2+13*y^2*z^3+5*y*z^4 ,
-- 8*x^3+12*y^3+x*z^2+3 ,
-- 7*x^2*y^4+18*x*y^3*z^2+y^3*z^3);
-- J:=Ideal([Homogenized(h,P)|P In Gens(I)]);



------------------------------------------------------------
T := Record(Name = "codex1");  -- tipo lavoro sui codici

T.Operation := "GBasis5x";

T.Indets := "z[1..3]x[1..3]";

T.I := "
I := Ideal(
x[1] + z[1] + z[2] + z[3], 
x[2]^3 + z[1]^3 + z[2]^3 + z[3]^3, 
x[3]^5 + z[1]^5 + z[2]^5 + z[3]^5, 
z[1]^20 - z[1], 
z[2]^20 - z[2], 
z[3]^20 - z[3],
x[1]^20 - x[1], 
x[2]^20 - x[2], 
x[3]^20 - x[3]
);
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "esempio1");

// This is a Lex example where the dehomog basis is not as simple as
// the affine basis, but simpler than the homog basis.

T.Operation := "GBasis5x";

T.Indets := "x,y";

T.I := "
I:=Ideal(x^2-y,xy-1);
";


Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "twomat3");

-- Very Long Reductions

T.Operation := "GBasis5x";

T.Indets := "a,b,c,d,e,f,g,j,i,x,y,z,t,u,v,w,l,m";

T.I := "
-- this is almost the commuter 3x3, last 2 polys are multiplied
I:=Ideal(
   d*z -c*t -f*u +e*v -i*v +f*m,
   -d*y -g*z +b*t +c*w,
   d*y -b*t -j*v +f*l,
   g*x +j*t -a*w +i*w -d*l -g*m,
   d*x -a*t +e*t -d*u -g*v +f*w,
   -c*x -f*y +a*z -i*z +b*v +c*m,
   -b*x +a*y -e*y -j*z +b*u +c*l,
   -g*j*z*m +g*y +j*u +j*v -b*w -c*w -e*l -f*l +i*l 
);
";


Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "esscemo");

T.Operation := "GBasis5x";

T.Indets := "t,x,y,z";

T.I := "
I:=Ideal(x^3-t^3,y^5-t^5,z^7-t^7,(y^5-t^5)^2*(x^3-t^3),(z^7-t^7)*(x^3-t^3)^2);
";

T.IsHomog := True;

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "alex3");

T.Operation := "GBasis5x";

T.Indets := "t,x,y,z,h";

T.I := "
I:=Ideal(
7*x*y^6*z^2+4*t^6*x*h^2+9*t^3*y^2*z*h^3+6*x^2*y*h^6,
8*t*x^5*y^3+2*t^3*x^3*y^2*h+4*t^6*z*h^2+3*x*h^8,
5*t^3*x^8*y^2*z+t^5*x^2*y*h^6+2*x^2*y*h^11+5*t*h^13 
 );
";

T.IsHomog := True;

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "brahamagupta");

T.Operation := "GBasis5x";

T.Indets := "u[1..4],x[1..4],a,h";

T.I := "
I:=Ideal(
 x[3]^2+x[4]^2-h^2*u[4]^2,
 -x[2]*x[3]+x[1]*x[4]+x[2]*h*u[1]-2*a*h,
 x[1]^2+x[2]^2-2*x[1]*h*u[1]+h^2*u[1]^2-h^2*u[2]^2,
 x[1]^2+x[2]^2-2*x[1]*x[3]+x[3]^2-2*x[2]*x[4]+x[4]^2-h^2*u[3]^2,
 x[2]*x[3]^2-x[1]^2*x[4]-x[2]^2*x[4]+x[2]*x[4]^2-x[2]*x[3]*h*u[1]+x[1]*x[4]*h*u[1] 
   );
I:=Subst(I,[[h,1]]);
I:=Ideal([Homogenized(h,P)|P In Gens(I)]);
";

T.IsHomog := True;

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "c7");

T.Operation := "GBasis5x";

T.Indets := "x[0..7]";

T.I := "
I:=Ideal(x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7],
x[1]x[2]+x[2]x[3]+x[3]x[4]+x[4]x[5]+x[5]x[6]+x[6]x[7]+x[7]x[1],
x[1]x[2]x[3]+x[2]x[3]x[4]+x[3]x[4]x[5]+x[4]x[5]x[6]+x[5]x[6]x[7]+x[6]x[7]x[1]+x[7]x[1]x[2],
x[1]x[2]x[3]x[4]+x[2]x[3]x[4]x[5]+x[3]x[4]x[5]x[6]+x[4]x[5]x[6]x[7]+x[5]x[6]x[7]x[1]+x[6]x[7]x[1]x[2]+x[7]x[1]x[2]x[3],
x[1]x[2]x[3]x[4]x[5]+x[2]x[3]x[4]x[5]x[6]+x[3]x[4]x[5]x[6]x[7]+x[4]x[5]x[6]x[7]x[1]+x[5]x[6]x[7]x[1]x[2]+x[6]x[7]x[1]x[2]x[3]+x[7]x[1]x[2]x[3]x[4],
x[1]x[2]x[3]x[4]x[5]x[6]+x[2]x[3]x[4]x[5]x[6]x[7]+x[3]x[4]x[5]x[6]x[7]x[1]+x[4]x[5]x[6]x[7]x[1]x[2]+x[5]x[6]x[7]x[1]x[2]x[3]+x[6]x[7]x[1]x[2]x[3]x[4]+x[7]x[1]x[2]x[3]x[4]x[5],
x[0]^7-x[1]x[2]x[3]x[4]x[5]x[6]x[7] );
";

T.IsHomog := True;

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "c7noh");

T.Operation := "GBasis5x";

T.Indets := "x[1..7]";

T.ExtraInfo5 := [["GradingDim", 0]];

T.I := "
I:=Ideal(x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7],
x[1]x[2]+x[2]x[3]+x[3]x[4]+x[4]x[5]+x[5]x[6]+x[6]x[7]+x[7]x[1],
x[1]x[2]x[3]+x[2]x[3]x[4]+x[3]x[4]x[5]+x[4]x[5]x[6]+x[5]x[6]x[7]+x[6]x[7]x[1]+x[7]x[1]x[2],
x[1]x[2]x[3]x[4]+x[2]x[3]x[4]x[5]+x[3]x[4]x[5]x[6]+x[4]x[5]x[6]x[7]+x[5]x[6]x[7]x[1]+x[6]x[7]x[1]x[2]+x[7]x[1]x[2]x[3],
x[1]x[2]x[3]x[4]x[5]+x[2]x[3]x[4]x[5]x[6]+x[3]x[4]x[5]x[6]x[7]+x[4]x[5]x[6]x[7]x[1]+x[5]x[6]x[7]x[1]x[2]+x[6]x[7]x[1]x[2]x[3]+x[7]x[1]x[2]x[3]x[4],
x[1]x[2]x[3]x[4]x[5]x[6]+x[2]x[3]x[4]x[5]x[6]x[7]+x[3]x[4]x[5]x[6]x[7]x[1]+x[4]x[5]x[6]x[7]x[1]x[2]+x[5]x[6]x[7]x[1]x[2]x[3]+x[6]x[7]x[1]x[2]x[3]x[4]+x[7]x[1]x[2]x[3]x[4]x[5],
1-x[1]x[2]x[3]x[4]x[5]x[6]x[7] );
";

T.IsHomog := False;

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "c8");

T.Operation := "GBasis5x";

T.Indets := "x[0..8]";

T.I := "
I:=Ideal(x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8],
 x[1]x[2] +

 x[2]x[3] + x[3]x[4] + x[4]x[5] + x[5]x[6] + x[6]x[7] + x[1]x[8] +
x[7]x[8],
 x[1]x[2]x[3] + x[2]x[3]x[4] + x[3]x[4]x[5] + x[4]x[5]x[6] +
x[5]x[6]x[7] + x[1]x[2]x[8] + x[1]x[7]x[8] + x[6]x[7]x[8],
 x[1]x[2]x[3]x[4] + x[2]x[3]x[4]x[5] + x[3]x[4]x[5]x[6] +
x[4]x[5]x[6]x[7] + x[1]x[2]x[3]x[8] + x[1]x[2]x[7]x[8] +
x[1]x[6]x[7]x[8] + x[5]x[6]x[7]x[8],
 x[1]x[2]x[3]x[4]x[5] + x[2]x[3]x[4]x[5]x[6] + x[3]x[4]x[5]x[6]x[7] +
x[1]x[2]x[3]x[4]x[8] + x[1]x[2]x[3]x[7]x[8] + x[1]x[2]x[6]x[7]x[8] +
x[1]x[5]x[6]x[7]x[8] + x[4]x[5]x[6]x[7]x[8],
 x[1]x[2]x[3]x[4]x[5]x[6] + x[2]x[3]x[4]x[5]x[6]x[7] +
x[1]x[2]x[3]x[4]x[5]x[8] + x[1]x[2]x[3]x[4]x[7]x[8] +
x[1]x[2]x[3]x[6]x[7]x[8] + x[1]x[2]x[5]x[6]x[7]x[8] +
x[1]x[4]x[5]x[6]x[7]x[8] + x[3]x[4]x[5]x[6]x[7]x[8],
 x[1]x[2]x[3]x[4]x[5]x[6]x[7] + x[1]x[2]x[3]x[4]x[5]x[6]x[8] +
x[1]x[2]x[3]x[4]x[5]x[7]x[8] + x[1]x[2]x[3]x[4]x[6]x[7]x[8] +
x[1]x[2]x[3]x[5]x[6]x[7]x[8] + x[1]x[2]x[4]x[5]x[6]x[7]x[8] +
x[1]x[3]x[4]x[5]x[6]x[7]x[8] + x[2]x[3]x[4]x[5]x[6]x[7]x[8],
x[0]^8 -x[1]x[2]x[3]x[4]x[5]x[6]x[7]x[8]);
";

T.IsHomog := True;

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "c9");

T.Operation := "GBasis5x";

T.Indets := "x[0..9]";

T.I := "
I:= Ideal(x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9],
x[1]x[2] + x[2]x[3] + x[3]x[4] + x[4]x[5] + x[5]x[6] + x[6]x[7] + x[7]x[8] + x[1]x[9] + x[8]x[9],
x[1]x[2]x[3] + x[2]x[3]x[4] + x[3]x[4]x[5] + x[4]x[5]x[6] + x[5]x[6]x[7] + x[6]x[7]x[8] + x[1]x[2]x[9] + x[1]x[8]x[9] + x[7]x[8]x[9],
x[1]x[2]x[3]x[4] + x[2]x[3]x[4]x[5] + x[3]x[4]x[5]x[6] + x[4]x[5]x[6]x[7] + x[5]x[6]x[7]x[8] + x[1]x[2]x[3]x[9] + x[1]x[2]x[8]x[9] + x[1]x[7]x[8]x[9] + x[6]x[7]x[8]x[9],
x[1]x[2]x[3]x[4]x[5] + x[2]x[3]x[4]x[5]x[6] + x[3]x[4]x[5]x[6]x[7] + x[4]x[5]x[6]x[7]x[8] + x[1]x[2]x[3]x[4]x[9] + x[1]x[2]x[3]x[8]x[9] + x[1]x[2]x[7]x[8]x[9] + x[1]x[6]x[7]x[8]x[9] + x[5]x[6]x[7]x[8]x[9],
x[1]x[2]x[3]x[4]x[5]x[6] + x[2]x[3]x[4]x[5]x[6]x[7] + x[3]x[4]x[5]x[6]x[7]x[8] + x[1]x[2]x[3]x[4]x[5]x[9] + x[1]x[2]x[3]x[4]x[8]x[9] + x[1]x[2]x[3]x[7]x[8]x[9] + x[1]x[2]x[6]x[7]x[8]x[9] + x[1]x[5]x[6]x[7]x[8]x[9] + x[4]x[5]x[6]x[7]x[8]x[9],
x[1]x[2]x[3]x[4]x[5]x[6]x[7] + x[2]x[3]x[4]x[5]x[6]x[7]x[8] + x[1]x[2]x[3]x[4]x[5]x[6]x[9] + x[1]x[2]x[3]x[4]x[5]x[8]x[9] + x[1]x[2]x[3]x[4]x[7]x[8]x[9] + x[1]x[2]x[3]x[6]x[7]x[8]x[9] + x[1]x[2]x[5]x[6]x[7]x[8]x[9] + x[1]x[4]x[5]x[6]x[7]x[8]x[9] + x[3]x[4]x[5]x[6]x[7]x[8]x[9],
x[1]x[2]x[3]x[4]x[5]x[6]x[7]x[8] + x[1]x[2]x[3]x[4]x[5]x[6]x[7]x[9] + x[1]x[2]x[3]x[4]x[5]x[6]x[8]x[9] + x[1]x[2]x[3]x[4]x[5]x[7]x[8]x[9] + x[1]x[2]x[3]x[4]x[6]x[7]x[8]x[9] + x[1]x[2]x[3]x[5]x[6]x[7]x[8]x[9] + x[1]x[2]x[4]x[5]x[6]x[7]x[8]x[9] + x[1]x[3]x[4]x[5]x[6]x[7]x[8]x[9] + x[2]x[3]x[4]x[5]x[6]x[7]x[8]x[9],
x[0]^9 - x[1]x[2]x[3]x[4]x[5]x[6]x[7]x[8]x[9]);
";

T.IsHomog := True;

Append(AllTests, T);

/*
To5(Gens(I),'c8_hQ');

Time E2:=BuchLT(Gens(I));

Check5(Gens(I));

Poincare(R/Ideal(E2));
Poincare(R/I);

Vector 281002

--EXAMPLE c8_hQ R g
Use R1::=QQ[x[0..8]];
number of reductions = 2220
len = 455                --time: 25590.15

--EXAMPLE c8_hQ R b
Use R1::=QQ[x[0..8]];
len = 455                --time: 15496.80

vector 260402
--EXAMPLE c8_hQ C g
Use R1::=QQ[x[0..8]];
number of reductions = 2220
len = 455                --time: 32234.34

--EXAMPLE c8_hQ CU g
Use R1::=QQ[x[0..8]];
number of reductions = 2220
len = 455                --time: 32132.98

--EXAMPLE c8_hQ C b
Use R1::=QQ[x[0..8]];
number of reductions = 2220
len = 455                --time: 11764.26

--EXAMPLE c8_hQ CU b
Use R1::=QQ[x[0..8]];
number of reductions = 2220
len = 455                --time: 11870.50


*/

------------------------------------------------------------
T := Record(Name = "caprasse");

T.Operation := "GBasis5x";

T.Indets := "x,y,z,t";

T.I := "
I:=Ideal(
y^2*z+2*x*y*t-2*x-z,
-x^3*z+4*x*y^2*z+4*x^2*y*t+2*y^3*t+4*x^2-10*y^2+4*x*z-10*y*t+2,
2*y*z*t+x*t^2-x-2*z,
-x*z^3+4*y*z^2*t+4*x*z*t^2+2*y*t^3+4*x*z+4*z^2-10*y*t-10*t^2+2
);
";

Append(AllTests, T);

------------------------------------------------------------
-- T := Record(Name = "dense");

-- T.Indets := "x[1..5]";

-- Define DenseId(N,M)
--   IGens := [Randomized(DensePoly(M)) | I In 1..N];
--   Return Ideal(IGens);
-- End;

-- Set Verbose;
-- N:=7;M:=5; 
-- I:=DenseId(N,M);

--   ExName:="dense755";

 
-- T.Indets := "x[1..5]";

-- Define DenseIdQ(N,M)
--   IGens:=[];
--   For I:=1 To N Do
--     L:=Support(DensePoly(M));
--     Rn:=[Rand(-1000,1000)|I IN 1..Len(L)];
--     P:=Sum([L[I]*Rn[I]|I IN 1..Len(L)]);
--     Append(IGens,P);
--   End;
--   Return Ideal(IGens);
-- End;

-- Set Verbose;
-- N:=5;M:=3;
-- J:=DenseIdQ(N,M);
-- I:=Subst(J,[[x[5],1]]);


------------------------------------------------------------
-- T := Record(Name = "eisenmann");

-- Use R ::= Z/(2)[x[1..26],y];
-- Test2 := Ideal([x[5]x[11] + x[7]x[12] + x[6]x[13] + x[10]x[14] + x[9]x[15] +
-- x[8]x[16], x[2]x[11] + x[4]x[12] + x[3]x[13] + x[10]x[18] + x[9]x[19] +
-- x[8]x[20], x[8]x[11] + x[9]x[11] + x[9]x[12] + x[10]x[12] + x[8]x[13] +
-- x[10]x[13] + x[10]x[24] + x[9]x[25] + x[8]x[26], x[1]x[12] + x[3]x[14] +
-- x[2]x[15] + x[8]x[17] + x[6]x[18] + x[5]x[19], x[5]x[12] + x[6]x[12] +
-- x[6]x[14] + x[8]x[14] + x[5]x[15] + x[8]x[15] + x[8]x[23] + x[6]x[24] +
-- x[5]x[25], x[1]x[13] + x[4]x[14] + x[2]x[16] + x[9]x[17] + x[7]x[18] +
-- x[5]x[20], x[1]x[11] + x[4]x[15] + x[3]x[16] + x[10]x[17] + x[7]x[19] +
-- x[6]x[20], x[5]x[13] + x[7]x[13] + x[7]x[14] + x[9]x[14] + x[5]x[16] +
-- x[9]x[16] + x[9]x[23] + x[7]x[24] + x[5]x[26], x[6]x[11] + x[7]x[11] +
-- x[7]x[15] + x[10]x[15] + x[6]x[16] + x[10]x[16] + x[10]x[23] + x[7]x[25] +
-- x[6]x[26], x[1]x[14] + x[2]x[14] + x[2]x[17] + x[5]x[17] + x[1]x[18] +
-- x[5]x[18] + x[5]x[22] + x[2]x[23] + x[1]x[24], x[1]x[15] + x[3]x[15] +
-- x[3]x[17] + x[6]x[17] + x[1]x[19] + x[6]x[19] + x[6]x[22] + x[3]x[23] +
-- x[1]x[25], x[2]x[12] + x[3]x[12] + x[3]x[18] + x[8]x[18] + x[2]x[19] +
-- x[8]x[19] + x[8]x[22] + x[3]x[24] + x[2]x[25], x[1]x[16] + x[4]x[16] +
-- x[4]x[17] + x[7]x[17] + x[1]x[20] + x[7]x[20] + x[7]x[22] + x[4]x[23] +
-- x[1]x[26], x[2]x[13] + x[4]x[13] + x[4]x[18] + x[9]x[18] + x[2]x[20] +
-- x[9]x[20] + x[9]x[22] + x[4]x[24] + x[2]x[26], x[3]x[11] + x[4]x[11] +
-- x[4]x[19] + x[10]x[19] + x[3]x[20] + x[10]x[20] + x[10]x[22] + x[4]x[25] +
-- x[3]x[26], x[10]x[11] + x[10]x[21] + x[10]x[25] + x[10]x[26], x[8]x[12] +
-- x[8]x[21] + x[8]x[24] + x[8]x[25], x[9]x[13] + x[9]x[21] + x[9]x[24] +
-- x[9]x[26], x[5]x[14] + x[5]x[21] + x[5]x[23] + x[5]x[24], x[6]x[15] +
-- x[6]x[21] + x[6]x[23] + x[6]x[25], x[7]x[16] + x[7]x[21] + x[7]x[23] +
-- x[7]x[26], x[1]x[17] + x[1]x[21] + x[1]x[22] + x[1]x[23], x[2]x[18] +
-- x[2]x[21] + x[2]x[22] + x[2]x[24], x[3]x[19] + x[3]x[21] + x[3]x[22] +
-- x[3]x[25], x[4]x[20] + x[4]x[21] + x[4]x[22] + x[4]x[26]]);  
 
 
-- L:=[x[10],x[8],x[9],x[5],x[6],x[16] + x[21] + x[23] + x[26],
--   x[17] + x[21] + x[22] + x[23],
--   x[18] + x[21] + x[22] + x[24],
--   x[19] + x[21] + x[22] + x[25],
--   x[20] + x[21] + x[22] + x[26]]; 
-- J:=Test2+Ideal(L);
-- Set Verbose;
-- Time E:=ReducedGBasis(J);


 
-- L2:=[x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],x[9],x[10]];
  
  
-- J:=Test2+Ideal(L2);
-- Set Verbose;
-- Time E:=ReducedGBasis(J);
 
 
-- L3:=[
--   x[11] + x[21] + x[25] + x[26],
--   x[12] + x[21] + x[24] + x[25],
--   x[13] + x[21] + x[24] + x[26],
--   x[14] + x[21] + x[23] + x[24],
--   x[15] + x[21] + x[23] + x[25],
--   x[16] + x[21] + x[23] + x[26],
--   x[17] + x[21] + x[22] + x[23],
--   x[18] + x[21] + x[22] + x[24],
--   x[19] + x[21] + x[22] + x[25],
--   x[20] + x[21] + x[22] + x[26]];
  
  
  
-- J:=Test2+Ideal(L3);
-- Set Verbose;
-- Time E:=ReducedGBasis(J);

--  L1:=[x[10],x[11] + x[21] + x[25] + x[26]];
--  L2:=[x[8] ,x[12] + x[21] + x[24] + x[25]];
--  L3:=[x[9] ,x[13] + x[21] + x[24] + x[26]];
--  L4:=[x[5] ,x[14] + x[21] + x[23] + x[24]];
--  L5:=[x[6], x[15] + x[21] + x[23] + x[25]];
--  L6:=[x[7], x[16] + x[21] + x[23] + x[26]];
--  L7:=[x[1], x[17] + x[21] + x[22] + x[23]];
--  L8:=[x[2], x[18] + x[21] + x[22] + x[24]];
--  L9:=[x[3], x[19] + x[21] + x[22] + x[25]];
--  L10:=[x[4],x[20] + x[21] + x[22] + x[26]];
 
 
--  L:=L1><L2><L3><L4><L5><L6><L7><L8><L9><L10;
 
 
 
--       For Index:=1 To Len(L) Do
--         Print Index,'  ';
--         Time E:=ReducedGBasis(Test2+Ideal(L[Index]));
--         PrintLn;
--       End;


------------------------------------------------------------
T := Record(Name = "gaukwa4");

T.Operation := "GBasis5x";

T.Indets := "w[1..4], x[1..4]";

T.I := "
I := Ideal(
 w[1]       + w[2]       + w[3]       + w[4]
                         + ( 4.88303340950105 ),
 w[1]*x[1]    + w[2]*x[2]    + w[3]*x[3]    + w[4]*x[4]
                         + ( 5.18782365203204 ),
 w[1]*x[1]^2 + w[2]*x[2]^2 + w[3]*x[3]^2 + w[4]*x[4]^2 
                         + ( -9.00683429228647 ),
 w[1]*x[1]^3 + w[2]*x[2]^3 + w[3]*x[3]^3 + w[4]*x[4]^3
                         + ( -9.48682692199895 ),
 w[1]*x[1]^4 + w[2]*x[2]^4 + w[3]*x[3]^4 + w[4]*x[4]^4
                         + ( 4.63259783551860 ),
 w[1]*x[1]^5 + w[2]*x[2]^5 + w[3]*x[3]^5 + w[4]*x[4]^5
                         + (-7.89936368499146 ),
 w[1]*x[1]^6 + w[2]*x[2]^6 + w[3]*x[3]^6 + w[4]*x[4]^6
                         + ( 9.79201808025014 ),
 w[1]*x[1]^7 + w[2]*x[2]^7 + w[3]*x[3]^7 + w[4]*x[4]^7
                         + (-2.74557888517134 )	 
	 );
";

T.I := "
I := Ideal(
 w[1]       + w[2]       + w[3]       + w[4]
                         + ( 9724 ),
 w[1]*x[1]    + w[2]*x[2]    + w[3]*x[3]    + w[4]*x[4]
                         + ( 9608 ),
 w[1]*x[1]^2 + w[2]*x[2]^2 + w[3]*x[3]^2 + w[4]*x[4]^2 
                         + ( 14611 ),
 w[1]*x[1]^3 + w[2]*x[2]^3 + w[3]*x[3]^3 + w[4]*x[4]^3
                         + ( 8753 ),
 w[1]*x[1]^4 + w[2]*x[2]^4 + w[3]*x[3]^4 + w[4]*x[4]^4
                         + ( 5800 ),
 w[1]*x[1]^5 + w[2]*x[2]^5 + w[3]*x[3]^5 + w[4]*x[4]^5
                         + (13028 ),
 w[1]*x[1]^6 + w[2]*x[2]^6 + w[3]*x[3]^6 + w[4]*x[4]^6
                         + ( -9867 ),
 w[1]*x[1]^7 + w[2]*x[2]^7 + w[3]*x[3]^7 + w[4]*x[4]^7
                         + (10060 ) 
	 );
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "gonnet-83");

T.Operation := "GBasis5x";

T.Indets := "a[0..5],b[0..5],c[0..5]";

T.I := "
I := Ideal(
a[5]*b[5],
a[5]*b[4]+a[4]*b[5],
 a[4]*b[4],
 a[5]*b[3]+a[3]*b[5],
 a[5]*b[3]+a[3]*b[5]+2*a[5]*b[5],
 a[3]*b[3]+a[5]*b[3]+a[3]*b[5]+a[5]*b[5],
 2*a[3]*b[3]+a[5]*b[3]+a[3]*b[5],
 a[4]*b[2]+a[2]*b[4],
 a[2]*b[2],
 a[5]*b[1]+a[4]*b[3]+a[3]*b[4]+b[5],
 a[4]*b[1]+b[4],
 a[2]*b[1]+b[2],
 a[0]*b[1]+a[4]*b[1]+a[3]*b[2]+a[2]*b[3]+b[0]+2*b[1]+b[4]+c[1],
 a[5]*b[0]+a[5]*b[1]+a[4]*b[3]+a[3]*b[4]+2*a[5]*b[4]+a[0]*b[5]+2*a[4]*b[5]+b[5]+c[5],
 a[4]*b[0]+a[4]*b[1]+a[5]*b[2]+a[0]*b[4]+2*a[4]*b[4]+a[2]*b[5]+b[4]+c[4],
 a[3]*b[0]+2*a[3]*b[1]+a[5]*b[1]+a[0]*b[3]+a[4]*b[3]+a[3]*b[4]+2*b[3]+b[5]+c[3],
 a[3]*b[0]+a[5]*b[0]+a[3]*b[1]+a[5]*b[1]+a[0]*b[3]+a[4]*b[3]+a[3]*b[4]+a[5]*b[4]+a[0]*b[5]+a[4]*b[5]+b[3]+b[5]+c[3]+c[5]-1,
 a[2]*b[0]+a[2]*b[1]+a[0]*b[2]+a[4]*b[2]+a[2]*b[4]+b[2]+c[2], a[0]*b[0]+a[4]*b[0]+a[0]*b[1]+a[4]*b[1]+a[3]*b[2]+a[5]*b[2]+a[2]*b[3]+a[0]*b[4]+a[4]*b[4]+a[2]*b[5]+b[0]+b[1]+b[4]+c[0]+c[1]+c[4]
);
";


Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "hairer2");

T.Operation := "GBasis5x";

T.Indets := "c[2..4],b[1..4],u,v,k,w,l,m";

T.I := "
I := Ideal(
 b[1]+b[2]+b[3]+b[4]-1,
 c[4]-w-l-m,
 c[3]-v-k,
 c[2]-u,
 2*c[4]*b[1]+2*c[3]*b[2]+2*c[2]*b[3]-1,
 6*c[2]*b[2]*k+6*c[2]*b[1]*l+6*c[3]*b[1]*m-1,
 3*c[4]^2*b[1]+3*c[3]^2*b[2]+3*c[2]^2*b[3]-1,
 24*c[2]*b[1]*k*m-1,
 8*c[2]*c[3]*b[2]*k+8*c[2]*c[4]*b[1]*l+8*c[3]*c[4]*b[1]*m-1,
 12*c[2]^2*b[2]*k+12*c[2]^2*b[1]*l+12*c[3]^2*b[1]*m-1,
 4*c[4]^3*b[1]+4*c[3]^3*b[2]+4*c[2]^3*b[3]-1 
);
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "homog_gonnet");

T.Operation := "GBasis5x";

T.Indets := "x,y,z,t,u,v,w,a,b,c,d,e,f,g,h,i,j,k";

T.I := "
I := Ideal(
ag , 
df+bg+ah+wk , 
ci , 
wf , 
cg+ai+di+ei+cj+tk+ck , 
cf+ag+dg+eg+ch+bi+aj+dj+ej+yk+uk+vk+2wk+ak+dk+ek , 
af+df+ef+wg+bg+ah+dh+eh+wj+bj+xk+zk+wk+bk-k^2 , 
wf+bf+wh+bh , 
2wf+bf+wh , 
2af+df+ef+2wg+bg+ah+wj+xk+wk , 
cf+2ag+dg+eg+wi+aj+yk+ak , 
cg+ai , 
af+wg , 
bf+wh+2bh , 
df+bg+ah+2dh+eh+bj+zk+wk+2bk , 
dg+ch+bi+dj+uk+ak+2dk+ek , 
di+ck , 
bf+wh , 
dg+ak);
";

T.IsHomog := True;

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "katsura7");

T.Operation := "GBasis5x";

T.Indets := "x[1..8]";

T.I := "
I := Ideal(

-x[1]+2*x[8]^2+2*x[7]^2+2*x[6]^2+2*x[5]^2+2*x[4]^2+2*x[3]^2+2*x[2]^2+x[1]^2,
 -x[2]+2*x[8]*x[7]+2*x[7]*x[6]+2*x[6]*x[5]+2*x[5]*x[4]+2*x[4]*x[3]+2*x[3]*x[2]+2*x[2]*x[1],
 -x[3]+2*x[8]*x[6]+2*x[7]*x[5]+2*x[6]*x[4]+2*x[5]*x[3]+2*x[4]*x[2]+2*x[3]*x[1]+x[2]^2,
 -x[4]+2*x[8]*x[5]+2*x[7]*x[4]+2*x[6]*x[3]+2*x[5]*x[2]+2*x[4]*x[1]+2*x[3]*x[2],
 -x[5]+2*x[8]*x[4]+2*x[7]*x[3]+2*x[6]*x[2]+2*x[5]*x[1]+2*x[4]*x[2]+x[3]^2,
 -x[6]+2*x[8]*x[3]+2*x[7]*x[2]+2*x[6]*x[1]+2*x[5]*x[2]+2*x[4]*x[3],
 -x[7]+2*x[8]*x[2]+2*x[7]*x[1]+2*x[6]*x[2]+2*x[5]*x[3]+x[4]^2,
 -1+2*x[8]+2*x[7]+2*x[6]+2*x[5]+2*x[4]+2*x[3]+2*x[2]+x[1]
);
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "katsura9");

T.Operation := "GBasis5x";

T.Indets := "x[1..10]";

T.I := "
I := Ideal(
-x[1]+2*x[10]^2+2*x[9]^2+2*x[8]^2+2*x[7]^2+2*x[6]^2+2*x[5]^2+2*x[4]^2+2*x[3]^2+2*x[2]^2+x[1]^2,
-x[2]+2*x[10]*x[9]+2*x[9]*x[8]+2*x[8]*x[7]+2*x[7]*x[6]+2*x[6]*x[5]+2*x[5]*x[4]+2*x[4]*x[3]+2*x[3]*x[2]+2*x[2]*x[1],
-x[3]+2*x[10]*x[8]+2*x[9]*x[7]+2*x[8]*x[6]+2*x[7]*x[5]+2*x[6]*x[4]+2*x[5]*x[3]+2*x[4]*x[2]+2*x[3]*x[1]+x[2]^2,
-x[4]+2*x[10]*x[7]+2*x[9]*x[6]+2*x[8]*x[5]+2*x[7]*x[4]+2*x[6]*x[3]+2*x[5]*x[2]+2*x[4]*x[1]+2*x[3]*x[2],
-x[5]+2*x[10]*x[6]+2*x[9]*x[5]+2*x[8]*x[4]+2*x[7]*x[3]+2*x[6]*x[2]+2*x[5]*x[1]+2*x[4]*x[2]+x[3]^2,
-x[6]+2*x[10]*x[5]+2*x[9]*x[4]+2*x[8]*x[3]+2*x[7]*x[2]+2*x[6]*x[1]+2*x[5]*x[2]+2*x[4]*x[3],
-x[7]+2*x[10]*x[4]+2*x[9]*x[3]+2*x[8]*x[2]+2*x[7]*x[1]+2*x[6]*x[2]+2*x[5]*x[3]+x[4]^2,
 -x[8]+2*x[10]*x[3]+2*x[9]*x[2]+2*x[8]*x[1]+2*x[7]*x[2]+2*x[6]*x[3]+2*x[5]*x[4],
 -x[9]+2*x[10]*x[2]+2*x[9]*x[1]+2*x[8]*x[2]+2*x[7]*x[3]+2*x[6]*x[4]+x[5]^2,
 -1+2*x[10]+2*x[9]+2*x[8]+2*x[7]+2*x[6]+2*x[5]+2*x[4]+2*x[3]+2*x[2]+x[1]
);
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "kin1");

T.Operation := "GBasis5x";

T.Indets := "s[1..6],c[1..6]";

T.I := "
I := Ideal(
 s[1]^2 + c[1]^2 - 1,
 s[2]^2 + c[2]^2 - 1,
 s[3]^2 + c[3]^2 - 1,
 s[4]^2 + c[4]^2 - 1,
 s[5]^2 + c[5]^2 - 1,
 s[6]^2 + c[6]^2 - 1,
 s[2]*c[5]*s[6] - s[3]*c[5]*s[6] - s[4]*c[5]*s[6] + c[2]*c[6] + c[3]*c[6] + c[4]*c[6] - 0.4077,
 c[1]*c[2]*s[5] + c[1]*c[3]*s[5] + c[1]*c[4]*s[5] + s[1]*c[5] - 1.9115,
 s[2]*s[5] + s[3]*s[5] + s[4]*s[5] - 1.9791,
 c[1]*c[2] + c[1]*c[3] + c[1]*c[4] + c[1]*c[2] + c[1]*c[3] + c[1]*c[2] - 4.0616,
 s[1]*c[2] + s[1]*c[3] + s[1]*c[4] + s[1]*c[2] + s[1]*c[3] + s[1]*c[2] - 1.7172,
 s[2] + s[3] + s[4] + s[2] + s[3] + s[2] - 3.9701
 );
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "mora1");

T.Operation := "GBasis5x";

T.Indets := "x,y,z";

T.I := "
A:=35; B:=25; C:=20;
Alpha:=7; Beta:= 11;
T:=1;
F:=x^A+y^B+z^C+x^Alpha*y^(Beta-5)+x^(Alpha-2)*y^(Beta-3)+
x^(Alpha-3)*y^(Beta-4)*z^2+x^(Alpha-4)*y^(Beta-4)*(y^2+T*x)^2;
I := Ideal(Flatten(List(Jacobian([F])))) + Ideal(F);
I := Ideal([P|P In Gens(I) And P<>0]);
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "mora9");

T.Operation := "GBasis5x";

T.Indets := "z[1..3],x[7..13],u[2..6]";

T.I := "
II := Ideal(
u[5]*u[2]^2-u[3]*u[4]^2-u[3]*u[5]^2+u[5]*u[3]^2,
u[6]^10,
2*u[3]*x[7]*u[4]+u[4]*u[2]*u[5]-2*x[7]*u[2]*u[5],
u[3]*u[5]^2-u[5]*u[3]^2-u[4]*u[2]*u[3],
-2*x[7]*u[2]-2*u[3]*x[8]+u[4]*u[2]+u[3]*u[5],
x[11]*u[2]-u[3]*x[10],
-4*x[12]+3*x[10]+u[4],
-4*x[13]+3*x[11]+u[5],
2*u[3]*x[8]-u[2]^2-u[3]^2,
z[1]*u[2]-u[6],
z[2]*u[3]-u[6],
z[3]*(u[5]*u[2]-u[3]*u[4])-u[6]);

IJ:=Ideal(u[3]*u[5]^2-u[5]*u[3]^2-u[4]*u[2]*u[3],
-4*x[12]+3*x[10]+u[4],-4*x[13]+3*x[11]+u[5],2*u[3]*x[8]-u[2]^2-u[3]^2,
z[3]*(u[5]*u[2]-u[3]*u[4])-u[6]);

I := II*IJ*IJ;
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "pavelle");

T.Operation := "GBasis5x";

T.Indets := "a,b,c,d,e";

T.I := "
I := Ideal(
d^5-e^5, c^5-d^5, b^5-c^5, a^4*b + b^4*c + c^4*d + d^4*e + a*e^4, a^5-b^5 
);
";

T.IsHomog := True;

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "schwartz10");

T.Operation := "GBasis5x";

T.Indets := "x[1..10]";

T.I := "
I := Ideal(
 2*x[5]*x[6]+2*x[4]*x[7]+2*x[3]*x[8]+2*x[2]*x[9]+2*x[1]*x[10]+x[10],
 x[5]^2+2*x[4]*x[6]+2*x[3]*x[7]+2*x[2]*x[8]+2*x[1]*x[9]+x[10]^2+x[9],
 2*x[4]*x[5]+2*x[3]*x[6]+2*x[2]*x[7]+2*x[1]*x[8]+2*x[9]*x[10]+x[8],
 x[4]^2+2*x[3]*x[5]+2*x[2]*x[6]+2*x[1]*x[7]+x[9]^2+2*x[8]*x[10]+x[7],
 2*x[3]*x[4]+2*x[2]*x[5]+2*x[1]*x[6]+2*x[8]*x[9]+2*x[7]*x[10]+x[6],
 x[3]^2+2*x[2]*x[4]+2*x[1]*x[5]+x[8]^2+2*x[7]*x[9]+2*x[6]*x[10]+x[5],
 2*x[2]*x[3]+2*x[1]*x[4]+2*x[7]*x[8]+2*x[6]*x[9]+2*x[5]*x[10]+x[4],
 x[2]^2+2*x[1]*x[3]+x[7]^2+2*x[6]*x[8]+2*x[5]*x[9]+2*x[4]*x[10]+x[3],
 2*x[1]*x[2]+2*x[6]*x[7]+2*x[5]*x[8]+2*x[4]*x[9]+2*x[3]*x[10]+x[2],
 x[1]^2+x[6]^2+2*x[5]*x[7]+2*x[4]*x[8]+2*x[3]*x[9]+2*x[2]*x[10]+x[1] 
    );
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "schwartz7");

T.Operation := "GBasis5x";

T.Indets := "x[1..7]";

T.I := "
I := Ideal(
x[4]^2+2*x[3]*x[5]+2*x[2]*x[6]+2*x[1]*x[7]+x[7],
   2*x[3]*x[4]+2*x[2]*x[5]+2*x[1]*x[6]+x[7]^2+x[6],
   x[3]^2+2*x[2]*x[4]+2*x[1]*x[5]+2*x[6]*x[7]+x[5],
   2*x[2]*x[3]+2*x[1]*x[4]+x[6]^2+2*x[5]*x[7]+x[4],
   x[2]^2+2*x[1]*x[3]+2*x[5]*x[6]+2*x[4]*x[7]+x[3],
   2*x[1]*x[2]+x[5]^2+2*x[4]*x[6]+2*x[3]*x[7]+x[2],
   x[1]^2+2*x[4]*x[5]+2*x[3]*x[6]+2*x[2]*x[7]+x[1] 
    );
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "t51");

T.Operation := "GBasis5x";

T.Indets := "t,x,y,z";

T.I := "
I := Ideal(t^5-t-z, t^6-t-y, t^51+t^16+t-x);
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "t31");

T.Operation := "GBasis5x";

T.Indets := "t,x,y,z";

T.I := "
I := Ideal(t^29-z, t^30-y, t^31-x);
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "virasoro");

T.Operation := "GBasis5x";

T.Indets := "x[1..8]";

T.I := "
I := Ideal( 
 8*x[1]^2+ 8*x[1]*x[2]+ 8*x[1]*x[3]+ 2*x[1]*x[4]+ 2*x[1]*x[5]+ 2*x[1]*x[6]+ 2*x[1]*x[7]-8*x[2]*x[3]-2*x[4]*x[7]
-2*x[5]*x[6]-x[1],
 8*x[1]*x[2]-8*x[1]*x[3]+ 8*x[2]^2+ 8*x[2]*x[3]+ 2*x[2]*x[4]+ 2*x[2]*x[5]+ 2*x[2]*x[6]+ 2*x[2]*x[7]-2*x[4]*x[6]
-2*x[5]*x[7]-x[2],
-8*x[1]*x[2]+ 8*x[1]*x[3]+ 8*x[2]*x[3]+ 8*x[3]^2+ 2*x[3]*x[4]+ 2*x[3]*x[5]+ 2*x[3]*x[6]+ 2*x[3]*x[7]-2*x[4]*
x[5]-2*x[6]*x[7]-x[3],
 2*x[1]*x[4]-2*x[1]*x[7]+ 2*x[2]*x[4]-2*x[2]*x[6]+ 2*x[3]*x[4]-2*x[3]*x[5]+ 8*x[4]^2+ 8*x[4]*x[5]+ 2*x[4]*x[6]+
 2*x[4]*x[7]+ 6*x[4]*x[8]-6*x[5]*x[8]-x[4],
 2*x[1]*x[5]-2*x[1]*x[6]+ 2*x[2]*x[5]-2*x[2]*x[7]-2*x[3]*x[4]+ 2*x[3]*x[5]+ 8*x[4]*x[5]-6*x[4]*x[8]+ 8*x[5]^2+
 2*x[5]*x[6]+ 2*x[5]*x[7]+ 6*x[5]*x[8]-x[5],
-2*x[1]*x[5]+ 2*x[1]*x[6]-2*x[2]*x[4]+ 2*x[2]*x[6]+ 2*x[3]*x[6]-2*x[3]*x[7]+ 2*x[4]*x[6]+ 2*x[5]*x[6]+ 8*x[6]^2
+ 8*x[6]*x[7]+ 6*x[6]*x[8]-6*x[7]*x[8]-x[6],
-2*x[1]*x[4]+ 2*x[1]*x[7]-2*x[2]*x[5]+ 2*x[2]*x[7]-2*x[3]*x[6]+ 2*x[3]*x[7]+ 2*x[4]*x[7]+ 2*x[5]*x[7]+ 8*x[6]*
x[7]-6*x[6]*x[8]+ 8*x[7]^2+ 6*x[7]*x[8]-x[7],
-6*x[4]*x[5]+ 6*x[4]*x[8]+ 6*x[5]*x[8]-6*x[6]*x[7]+ 6*x[6]*x[8]+ 6*x[7]*x[8]+ 8*x[8]^2-x[8]
);
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "wang");

T.Operation := "GBasis5x";

T.Indets := "t,u,v,w,x,y,z";

T.I := "
I := Ideal((x-u)^2+(y-v)^2-1,v^2-u^3,2v(x-u)+3u^2(y-v), (3wu^2-1)(2wv-1));
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "hairer3");

T.Operation := "GBasis5x";

T.Indets := "x[0..13]";

T.I := "
I := Ideal(2*x[0]*x[4] + 2*x[1]*x[5] + 2*x[2]*x[6] + 2*x[3]*x[7] - 1,
3*x[0]^2*x[4] + 3*x[1]^2*x[5] + 3*x[2]^2*x[6] + 3*x[3]^2*x[7] - 1,
6*x[0]*x[5]*x[8] + 6*x[0]*x[6]*x[9] + 6*x[0]*x[7]*x[11] + 6*x[1]*x[6]*x[10] + 6*x[1]*x[7]*x[12] + 6*x[2]*x[7]*x[13] - 1,
4*x[0]^3*x[4] + 4*x[1]^3*x[5] + 4*x[2]^3*x[6] + 4*x[3]^3*x[7] - 1,
8*x[0]*x[1]*x[5]*x[8] + 8*x[0]*x[2]*x[6]*x[9] + 8*x[0]*x[3]*x[7]*x[11] + 8*x[1]*x[2]*x[6]*x[10] + 8*x[1]*x[3]*x[7]*x[12] + 8*x[2]*x[3]*x[7]*x[13] - 1,
12*x[0]^2*x[5]*x[8] + 12*x[0]^2*x[6]*x[9] + 12*x[0]^2*x[7]*x[11] + 12*x[1]^2*x[6]*x[10] + 12*x[1]^2*x[7]*x[12] + 12*x[2]^2*x[7]*x[13] - 1,
24*x[0]*x[6]*x[8]*x[10] + 24*x[0]*x[7]*x[8]*x[12] + 24*x[0]*x[7]*x[9]*x[13] + 24*x[1]*x[7]*x[10]*x[13] - 1,
5*x[0]^4*x[4] + 5*x[1]^4*x[5] + 5*x[2]^4*x[6] + 5*x[3]^4*x[7] - 1,
10*x[0]*x[1]^2*x[5]*x[8] + 10*x[0]*x[2]^2*x[6]*x[9] + 10*x[0]*x[3]^2*x[7]*x[11] + 10*x[1]*x[2]^2*x[6]*x[10] + 10*x[1]*x[3]^2*x[7]*x[12] + 10*x[2]*x[3]^2*x[7]*x[13] - 1,
15*x[0]^3*x[7]*x[11] + 15*x[0]^2*x[1]*x[5]*x[8] + 15*x[0]^2*x[2]*x[6]*x[9] + 15*x[1]^2*x[2]*x[6]*x[10] + 15*x[1]^2*x[3]*x[7]*x[12] + 15*x[2]^2*x[3]*x[7]*x[13] - 1,
30*x[0]*x[2]*x[6]*x[8]*x[10] + 30*x[0]*x[3]*x[7]*x[8]*x[12] + 30*x[0]*x[3]*x[7]*x[9]*x[13] + 30*x[1]*x[3]*x[7]*x[10]*x[13] - 1,
-20*x[0]^2*x[5] + 20*x[0]^2*x[6]*x[9]^2 + 20*x[0]^2*x[7]*x[11]^2 + 40*x[0]*x[1]*x[6]*x[9]*x[10] + 40*x[0]*x[1]*x[7]*x[11]*x[12] +
40*x[0]*x[2]*x[7]*x[11]*x[13] + 20*x[1]^2*x[6]*x[10]^2 + 20*x[1]^2*x[7]*x[12]^2 + 40*x[1]*x[2]*x[7]*x[12]*x[13] + 20*x[2]^2*x[7]*x[13]^2 -1,
20*x[0]^3*x[5]*x[8] + 20*x[0]^3*x[6]*x[9] + 20*x[0]^3*x[7]*x[11] + 20*x[1]^3*x[6]*x[10] + 20*x[1]^3*x[7]*x[12] + 20*x[2]^3*x[7]*x[13] - 1,
40*x[0]*x[1]*x[6]*x[8]*x[10] + 40*x[0]*x[1]*x[7]*x[8]*x[12] + 40*x[0]*x[2]*x[7]*x[9]*x[13] + 40*x[1]*x[2]*x[7]*x[10]*x[13] - 1,
60*x[0]^2*x[6]*x[8]*x[10] + 60*x[0]^2*x[7]*x[8]*x[12] + 60*x[0]^2*x[7]*x[9]*x[13] + 60*x[1]^2*x[7]*x[10]*x[13] - 1,
120*x[0]*x[7]*x[8]*x[10]*x[13] - 1);
";

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "intersection-c4-c5");

T.Operation := "Intersection5x";

T.Indets := "h,x,y,z,t,u,q";

T.I := "I := Ideal(x + y + z + t, xy + yz + xt + zt, xyz + xyt + xzt + yzt, h^4 -
xyzt);
";

T.J := "J := Ideal(x + y + z + t + u + q, xy + yz + zt + tu + xq + uq, xyz + yzt +
ztu +
xyq + xuq + tuq, xyzt + yztu + xyzq + xyuq + xtuq + ztuq, xyztu + xyztq
+ xyzuq
+ xytuq + xztuq + yztuq, h^6 - xyztuq);";

T.IsHomog := True;

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "colon-c4-c5");

T.Operation := "Colon5x";

T.Indets := "h,x,y,z,t,u,q";

T.I := "I := Ideal(x + y + z + t + u + q, xy + yz + zt + tu + xq + uq, xyz + yzt +
ztu +
xyq + xuq + tuq, xyzt + yztu + xyzq + xyuq + xtuq + ztuq, xyztu + xyztq
+ xyzuq
+ xytuq + xztuq + yztuq, h^6 - xyztuq);
";

T.J := "J := Intersection(I, Ideal(x + y + z + t, xy + yz + xt + zt, xyz + xyt + xzt + yzt, h^4 -
xyzt));";

T.IsHomog := True;

Append(AllTests, T);


------------------------------------------------------------
T := Record(Name = "dense564");

T.Operation := "GBasis5x";

T.Indets := "x,y,z,w,u";

T.I := "I := Ideal(
24249*x^4 + 3494*x^3*y + 31136*x^2*y^2 + 12184*x*y^3 + 28274*y^4 +
6567*x^3*z + 9904*x^2*y*z + 5842*x*y^2*z + 12732*y^3*z + 25905*x^2*z^2
+ 18260*x*y*z^2 + 27433*y^2*z^2 + 31259*x*z^3 + 16709*y*z^3 + 2072*z^4
+ 1489*x^3*w + 28569*x^2*y*w + 15030*x*y^2*w + 28669*y^3*w +
5549*x^2*z*w + 25932*x*y*z*w + 10474*y^2*z*w + 18943*x*z^2*w +
10543*y*z^2*w + 18243*z^3*w + 12818*x^2*w^2 + 8735*x*y*w^2 +
11220*y^2*w^2 + 12977*x*z*w^2 + 19200*y*z*w^2 + 2672*z^2*w^2 +
18884*x*w^3 + 22695*y*w^3 + 15466*z*w^3 + 12726*w^4 + 624*x^3*u +
22033*x^2*y*u + 22631*x*y^2*u + 20127*y^3*u + 2762*x^2*z*u +
30194*x*y*z*u + 6384*y^2*z*u + 11853*x*z^2*u + 29450*y*z^2*u +
4751*z^3*u + 27587*x^2*w*u + 12598*x*y*w*u + 1317*y^2*w*u +
24275*x*z*w*u + 9264*y*z*w*u + 20528*z^2*w*u + 18204*x*w^2*u +
1397*y*w^2*u + 7468*z*w^2*u + 28748*w^3*u + 19640*x^2*u^2 +
1944*x*y*u^2 + 19141*y^2*u^2 + 30860*x*z*u^2 + 28582*y*z*u^2 +
6338*z^2*u^2 + 1529*x*w*u^2 + 15464*y*w*u^2 + 29033*z*w*u^2 +
30657*w^2*u^2 + 9848*x*u^3 + 11315*y*u^3 + 20687*z*u^3 + 14137*w*u^3 +
31442*u^4,
5108*x^4 + 25990*x^3*y + 19484*x^2*y^2 + 16961*x*y^3 + 23437*y^4 +
24236*x^3*z + 26206*x^2*y*z + 17693*x*y^2*z + 7211*y^3*z +
18479*x^2*z^2 + 8616*x*y*z^2 + 9397*y^2*z^2 + 4680*x*z^3 + 10013*y*z^3
+ 16865*z^4 + 15086*x^3*w + 11311*x^2*y*w + 18810*x*y^2*w + 2224*y^3*w
+ 10168*x^2*z*w + 15389*x*y*z*w + 8563*y^2*z*w + 25358*x*z^2*w +
12511*y*z^2*w + 19254*z^3*w + 24012*x^2*w^2 + 4018*x*y*w^2 +
30570*y^2*w^2 + 26358*x*z*w^2 + 18155*y*z*w^2 + 11667*z^2*w^2 +
13124*x*w^3 + 12142*y*w^3 + 31152*z*w^3 + 11743*w^4 + 17238*x^3*u +
5043*x^2*y*u + 5947*x*y^2*u + 16589*y^3*u + 25915*x^2*z*u +
24426*x*y*z*u + 6863*y^2*z*u + 3310*x*z^2*u + 10764*y*z^2*u +
30537*z^3*u + 1833*x^2*w*u + 25851*x*y*w*u + 9845*y^2*w*u +
2301*x*z*w*u + 28075*y*z*w*u + 1671*z^2*w*u + 31352*x*w^2*u +
18296*y*w^2*u + 27030*z*w^2*u + 11860*w^3*u + 5548*x^2*u^2 +
697*x*y*u^2 + 29539*y^2*u^2 + 17776*x*z*u^2 + 8713*y*z*u^2 +
29353*z^2*u^2 + 11101*x*w*u^2 + 21837*y*w*u^2 + 23153*z*w*u^2 +
23911*w^2*u^2 + 1578*x*u^3 + 22049*y*u^3 + 28954*z*u^3 + 21186*w*u^3 +
6636*u^4,
4525*x^4 + 13609*x^3*y + 27160*x^2*y^2 + 7835*x*y^3 + 6031*y^4 +
25695*x^3*z + 9668*x^2*y*z + 31882*x*y^2*z + 3537*y^3*z +
11970*x^2*z^2 + 9613*x*y*z^2 + 5209*y^2*z^2 + 24980*x*z^3 + 9567*y*z^3
+ 13897*z^4 + 18498*x^3*w + 28776*x^2*y*w + 28255*x*y^2*w +
16035*y^3*w + 14549*x^2*z*w + 4966*x*y*z*w + 13385*y^2*z*w +
7309*x*z^2*w + 8461*y*z^2*w + 4535*z^3*w + 31220*x^2*w^2 +
10039*x*y*w^2 + 8243*y^2*w^2 + 28172*x*z*w^2 + 12883*y*z*w^2 +
14879*z^2*w^2 + 14355*x*w^3 + 8150*y*w^3 + 10036*z*w^3 + 22190*w^4 +
14182*x^3*u + 17389*x^2*y*u + 13516*x*y^2*u + 14061*y^3*u +
20927*x^2*z*u + 7144*x*y*z*u + 5332*y^2*z*u + 7794*x*z^2*u +
121*y*z^2*u + 14900*z^3*u + 3349*x^2*w*u + 18620*x*y*w*u +
11673*y^2*w*u + 31604*x*z*w*u + 2652*y*z*w*u + 7881*z^2*w*u +
4567*x*w^2*u + 29698*y*w^2*u + 15190*z*w^2*u + 26690*w^3*u +
15891*x^2*u^2 + 14407*x*y*u^2 + 4726*y^2*u^2 + 24134*x*z*u^2 +
24237*y*z*u^2 + 17610*z^2*u^2 + 20671*x*w*u^2 + 6589*y*w*u^2 +
25760*z*w*u^2 + 12366*w^2*u^2 + 10437*x*u^3 + 21600*y*u^3 +
29755*z*u^3 + 23954*w*u^3 + 17320*u^4,
337*x^4 + 12756*x^3*y + 22652*x^2*y^2 + 21792*x*y^3 + 12878*y^4 +
19210*x^3*z + 25141*x^2*y*z + 13156*x*y^2*z + 12542*y^3*z +
24743*x^2*z^2 + 29469*x*y*z^2 + 20423*y^2*z^2 + 10968*x*z^3 +
27164*y*z^3 + 17271*z^4 + 5655*x^3*w + 24713*x^2*y*w + 13336*x*y^2*w +
24043*y^3*w + 30506*x^2*z*w + 5571*x*y*z*w + 23311*y^2*z*w +
832*x*z^2*w + 25821*y*z^2*w + 30729*z^3*w + 26859*x^2*w^2 +
17917*x*y*w^2 + 20327*y^2*w^2 + 24612*x*z*w^2 + 23529*y*z*w^2 +
5644*z^2*w^2 + 6607*x*w^3 + 4282*y*w^3 + 9954*z*w^3 + 28400*w^4 +
30821*x^3*u + 29165*x^2*y*u + 3196*x*y^2*u + 11974*y^3*u +
9704*x^2*z*u + 27939*x*y*z*u + 9440*y^2*z*u + 11785*x*z^2*u +
20566*y*z^2*u + 18262*z^3*u + 29056*x^2*w*u + 26221*x*y*w*u +
24634*y^2*w*u + 10389*x*z*w*u + 31922*y*z*w*u + 23137*z^2*w*u +
29621*x*w^2*u + 23230*y*w^2*u + 5627*z*w^2*u + 5098*w^3*u +
3615*x^2*u^2 + 484*x*y*u^2 + 23015*y^2*u^2 + 23942*x*z*u^2 +
6754*y*z*u^2 + 28202*z^2*u^2 + 11244*x*w*u^2 + 13361*y*w*u^2 +
481*z*w*u^2 + 21198*w^2*u^2 + 23419*x*u^3 + 31303*y*u^3 + 18*z*u^3 +
26616*w*u^3 + 24935*u^4,
9722*x^4 + 4210*x^3*y + 2373*x^2*y^2 + 3165*x*y^3 + 24776*y^4 +
2293*x^3*z + 218*x^2*y*z + 18995*x*y^2*z + 26927*y^3*z + 24269*x^2*z^2
+ 572*x*y*z^2 + 31722*y^2*z^2 + 3545*x*z^3 + 23803*y*z^3 + 5347*z^4 +
8643*x^3*w + 27418*x^2*y*w + 19492*x*y^2*w + 13316*y^3*w +
1015*x^2*z*w + 26246*x*y*z*w + 9515*y^2*z*w + 12259*x*z^2*w +
7604*y*z^2*w + 23658*z^3*w + 15115*x^2*w^2 + 12682*x*y*w^2 +
4616*y^2*w^2 + 15134*x*z*w^2 + 7295*y*z*w^2 + 29551*z^2*w^2 +
6514*x*w^3 + 11505*y*w^3 + 13582*z*w^3 + 23341*w^4 + 4279*x^3*u +
15876*x^2*y*u + 5217*x*y^2*u + 4932*y^3*u + 24461*x^2*z*u +
29486*x*y*z*u + 5504*y^2*z*u + 5839*x*z^2*u + 14690*y*z^2*u +
10965*z^3*u + 24847*x^2*w*u + 4991*x*y*w*u + 20041*y^2*w*u +
12336*x*z*w*u + 18308*y*z*w*u + 21056*z^2*w*u + 6579*x*w^2*u +
9481*y*w^2*u + 14973*z*w^2*u + 27844*w^3*u + 14797*x^2*u^2 +
11747*x*y*u^2 + 8523*y^2*u^2 + 19413*x*z*u^2 + 8539*y*z*u^2 +
29479*z^2*u^2 + 30623*x*w*u^2 + 28714*y*w*u^2 + 8982*z*w*u^2 +
12202*w^2*u^2 + 20052*x*u^3 + 26922*y*u^3 + 9736*z*u^3 + 25270*w*u^3 +
31854*u^4,
2195*x^4 + 4411*x^3*y + 19016*x^2*y^2 + 8034*x*y^3 + 19101*y^4 +
11640*x^3*z + 878*x^2*y*z + 24093*x*y^2*z + 31681*y^3*z +
26875*x^2*z^2 + 24059*x*y*z^2 + 2393*y^2*z^2 + 1451*x*z^3 +
15198*y*z^3 + 31027*z^4 + 10953*x^3*w + 29996*x^2*y*w + 10771*x*y^2*w
+ 19477*y^3*w + 31067*x^2*z*w + 19310*x*y*z*w + 30614*y^2*z*w +
29687*x*z^2*w + 29683*y*z^2*w + 7593*z^3*w + 9887*x^2*w^2 +
17732*x*y*w^2 + 16173*y^2*w^2 + 19623*x*z*w^2 + 10999*y*z*w^2 +
29685*z^2*w^2 + 3476*x*w^3 + 15411*y*w^3 + 16699*z*w^3 + 25171*w^4 +
16170*x^3*u + 28339*x^2*y*u + 7707*x*y^2*u + 21921*y^3*u +
9675*x^2*z*u + 2579*x*y*z*u + 13977*y^2*z*u + 12068*x*z^2*u +
17691*y*z^2*u + 10834*z^3*u + 24754*x^2*w*u + 28645*x*y*w*u +
8827*y^2*w*u + 3522*x*z*w*u + 29780*y*z*w*u + 21552*z^2*w*u +
4491*x*w^2*u + 28391*y*w^2*u + 19237*z*w^2*u + 2171*w^3*u +
17643*x^2*u^2 + 10782*x*y*u^2 + 19903*y^2*u^2 + 1813*x*z*u^2 +
12063*y*z*u^2 + 12561*z^2*u^2 + 31499*x*w*u^2 + 15540*y*w*u^2 +
9630*z*w*u^2 + 29856*w^2*u^2 + 8708*x*u^3 + 7458*y*u^3 + 7850*z*u^3 +
16416*w*u^3 + 29380*u^4
); ";

T.IsHomog := True;

Append(AllTests, T);

------------------------------------------------------------
T := Record(Name = "dense755");

T.Operation := "GBasis5x";

T.Indets := "x,y,z,w,u";

T.I := "I := Ideal(
9628*x^5 + 14334*x^4*y + 13087*x^3*y^2 + 8585*x^2*y^3 + 2440*x*y^4
-11304*y^5 -14533*x^4*z + 11380*x^3*y*z -15556*x^2*y^2*z +
2173*x*y^3*z -4450*y^4*z -713*x^3*z^2 + 13907*x^2*y*z^2
-12724*x*y^2*z^2 -10063*y^3*z^2 -8588*x^2*z^3 + 7422*x*y*z^3
-10478*y^2*z^3 -2760*x*z^4 + 4546*y*z^4 -2845*z^5 + 5666*x^4*w
-2476*x^3*y*w -4600*x^2*y^2*w + 354*x*y^3*w + 14879*y^4*w +
6572*x^3*z*w + 9172*x^2*y*z*w -13939*x*y^2*z*w -10573*y^3*z*w
-5032*x^2*z^2*w + 9351*x*y*z^2*w + 3761*y^2*z^2*w -10287*x*z^3*w
-14067*y*z^3*w -12141*z^4*w -7929*x^3*w^2 + 3403*x^2*y*w^2
-760*x*y^2*w^2 + 8518*y^3*w^2 -12766*x^2*z*w^2 -5210*x*y*z*w^2
-10537*y^2*z*w^2 + 14802*x*z^2*w^2 + 14069*y*z^2*w^2 + 11404*z^3*w^2 +
6214*x^2*w^3 + 3149*x*y*w^3 + 14587*y^2*w^3 + 3454*x*z*w^3
-10647*y*z*w^3 + 11743*z^2*w^3 -9222*x*w^4 -13122*y*w^4 + 7143*z*w^4
-8868*w^5 + 15418*x^4*u -4627*x^3*y*u + 304*x^2*y^2*u + 15140*x*y^3*u
-15200*y^4*u + 8934*x^3*z*u -7512*x^2*y*z*u + 2222*x*y^2*z*u
-1353*y^3*z*u + 10424*x^2*z^2*u -9918*x*y*z^2*u -9282*y^2*z^2*u
-4515*x*z^3*u + 2983*y*z^3*u + 12898*z^4*u -3620*x^3*w*u
-2227*x^2*y*w*u + 2361*x*y^2*w*u + 11182*y^3*w*u -6500*x^2*z*w*u
-4577*x*y*z*w*u -14607*y^2*z*w*u + 10310*x*z^2*w*u + 10011*y*z^2*w*u +
2509*z^3*w*u + 13324*x^2*w^2*u + 3412*x*y*w^2*u -6713*y^2*w^2*u +
202*x*z*w^2*u + 10555*y*z*w^2*u -1919*z^2*w^2*u -2722*x*w^3*u
-12413*y*w^3*u + 12046*z*w^3*u + 12419*w^4*u + 4390*x^3*u^2
-11023*x^2*y*u^2 + 4907*x*y^2*u^2 -11729*y^3*u^2 + 1286*x^2*z*u^2
-3010*x*y*z*u^2 -7986*y^2*z*u^2 -7996*x*z^2*u^2 -7525*y*z^2*u^2
-5003*z^3*u^2 + 4902*x^2*w*u^2 + 2517*x*y*w*u^2 -7230*y^2*w*u^2
-11078*x*z*w*u^2 + 13699*y*z*w*u^2 -69*z^2*w*u^2 -15655*x*w^2*u^2
-907*y*w^2*u^2 + 10241*z*w^2*u^2 -5644*w^3*u^2 + 15263*x^2*u^3 +
5223*x*y*u^3 + 11429*y^2*u^3 + 8550*x*z*u^3 + 5426*y*z*u^3 +
3643*z^2*u^3 -11711*x*w*u^3 -15638*y*w*u^3 -8770*z*w*u^3 + 336*w^2*u^3
-3219*x*u^4 + 9281*y*u^4 + 2974*z*u^4 + 15350*w*u^4 -2448*u^5,

4260*x^5 + 12340*x^4*y -10434*x^3*y^2 + 9926*x^2*y^3 -13527*x*y^4
-15437*y^5 -3514*x^4*z -11010*x^3*y*z -9006*x^2*y^2*z -14592*x*y^3*z
-15652*y^4*z -9075*x^3*z^2 + 1757*x^2*y*z^2 -2898*x*y^2*z^2 +
14827*y^3*z^2 + 9774*x^2*z^3 + 12365*x*y*z^3 -11952*y^2*z^3
-10799*x*z^4 + 2573*y*z^4 + 7135*z^5 -7156*x^4*w -9137*x^3*y*w +
5158*x^2*y^2*w -2265*x*y^3*w + 4860*y^4*w + 1940*x^3*z*w +
7016*x^2*y*z*w + 7834*x*y^2*z*w -1052*y^3*z*w + 4569*x^2*z^2*w
-6247*x*y*z^2*w + 11288*y^2*z^2*w + 7796*x*z^3*w + 3679*y*z^3*w +
11422*z^4*w -7640*x^3*w^2 + 165*x^2*y*w^2 + 14074*x*y^2*w^2
-2985*y^3*w^2 -765*x^2*z*w^2 -1578*x*y*z*w^2 + 1602*y^2*z*w^2 +
992*x*z^2*w^2 + 9185*y*z^2*w^2 -1913*z^3*w^2 -7576*x^2*w^3
-10453*x*y*w^3 -204*y^2*w^3 -4714*x*z*w^3 -7880*y*z*w^3 -11411*z^2*w^3
+ 1791*x*w^4 + 14986*y*w^4 -6252*z*w^4 -474*w^5 + 1504*x^4*u
-4312*x^3*y*u -11799*x^2*y^2*u + 9339*x*y^3*u -5364*y^4*u
-7230*x^3*z*u -15250*x^2*y*z*u -12418*x*y^2*z*u + 14227*y^3*z*u
-11571*x^2*z^2*u + 12665*x*y*z^2*u -11755*y^2*z^2*u + 2255*x*z^3*u
-5264*y*z^3*u -14739*z^4*u + 1490*x^3*w*u + 6819*x^2*y*w*u
-13137*x*y^2*w*u -15860*y^3*w*u -15999*x^2*z*w*u -1389*x*y*z*w*u
-9774*y^2*z*w*u -12791*x*z^2*w*u -1592*y*z^2*w*u -14488*z^3*w*u +
11333*x^2*w^2*u -13003*x*y*w^2*u + 965*y^2*w^2*u + 7977*x*z*w^2*u +
12748*y*z*w^2*u + 14152*z^2*w^2*u + 9482*x*w^3*u -9906*y*w^3*u +
2353*z*w^3*u + 479*w^4*u -15270*x^3*u^2 + 8784*x^2*y*u^2
-14771*x*y^2*u^2 -14027*y^3*u^2 -8991*x^2*z*u^2 -12681*x*y*z*u^2
-1361*y^2*z*u^2 + 11257*x*z^2*u^2 + 3235*y*z^2*u^2 + 7036*z^3*u^2 +
10179*x^2*w*u^2 + 4726*x*y*w*u^2 -4486*y^2*w*u^2 + 10703*x*z*w*u^2 +
2527*y*z*w*u^2 -6824*z^2*w*u^2 + 9315*x*w^2*u^2 -7247*y*w^2*u^2 +
12389*z*w^2*u^2 + 7723*w^3*u^2 -8073*x^2*u^3 + 5380*x*y*u^3 +
8381*y^2*u^3 -7108*x*z*u^3 + 13357*y*z*u^3 -10873*z^2*u^3
-11298*x*w*u^3 + 4497*y*w*u^3 + 11224*z*w*u^3 -8944*w^2*u^3 +
4976*x*u^4 + 9616*y*u^4 + 13501*z*u^4 + 3866*w*u^4 -4411*u^5,

-13832*x^5 + 4846*x^4*y -5772*x^3*y^2 -2574*x^2*y^3 + 8082*x*y^4 +
 14926*y^5 -10737*x^4*z -5534*x^3*y*z + 10440*x^2*y^2*z -33*x*y^3*z
 -3007*y^4*z + 3616*x^3*z^2 + 9282*x^2*y*z^2 -10253*x*y^2*z^2
 -15998*y^3*z^2 -1337*x^2*z^3 + 13677*x*y*z^3 -10618*y^2*z^3 +
 7044*x*z^4 -11773*y*z^4 -15602*z^5 + 9832*x^4*w + 8932*x^3*y*w
 -11105*x^2*y^2*w -10946*x*y^3*w + 13649*y^4*w + 7533*x^3*z*w +
 12331*x^2*y*z*w -4852*x*y^2*z*w -6943*y^3*z*w + 7920*x^2*z^2*w
 -5023*x*y*z^2*w -2096*y^2*z^2*w + 15810*x*z^3*w -7597*y*z^3*w
 -12356*z^4*w -1267*x^3*w^2 -4672*x^2*y*w^2 + 14113*x*y^2*w^2
 -9169*y^3*w^2 -4705*x^2*z*w^2 -7236*x*y*z*w^2 -5553*y^2*z*w^2
 -13765*x*z^2*w^2 + 14514*y*z^2*w^2 -7889*z^3*w^2 -1441*x^2*w^3 +
 9849*x*y*w^3 -4846*y^2*w^3 + 5603*x*z*w^3 -1924*y*z*w^3 -6787*z^2*w^3
 -2906*x*w^4 -11333*y*w^4 -4230*z*w^4 -191*w^5 + 2316*x^4*u +
 3303*x^3*y*u + 12140*x^2*y^2*u + 11125*x*y^3*u -3640*y^4*u
 -11943*x^3*z*u + 6103*x^2*y*z*u + 7925*x*y^2*z*u -14475*y^3*z*u +
 12167*x^2*z^2*u + 9230*x*y*z^2*u -2081*y^2*z^2*u + 7495*x*z^3*u
 -8660*y*z^3*u -11250*z^4*u -15552*x^3*w*u -15895*x^2*y*w*u
 -3141*x*y^2*w*u + 2686*y^3*w*u + 12280*x^2*z*w*u -11030*x*y*z*w*u +
 1245*y^2*z*w*u -9873*x*z^2*w*u -2215*y*z^2*w*u -11493*z^3*w*u +
 1864*x^2*w^2*u + 4660*x*y*w^2*u -738*y^2*w^2*u -9469*x*z*w^2*u +
 430*y*z*w^2*u -929*z^2*w^2*u + 6509*x*w^3*u + 3733*y*w^3*u +
 11211*z*w^3*u -14369*w^4*u + 13754*x^3*u^2 + 12929*x^2*y*u^2 +
 5395*x*y^2*u^2 + 3338*y^3*u^2 -1545*x^2*z*u^2 -779*x*y*z*u^2 +
 12568*y^2*z*u^2 -3626*x*z^2*u^2 + 6716*y*z^2*u^2 -14433*z^3*u^2
 -14875*x^2*w*u^2 + 4826*x*y*w*u^2 + 15336*y^2*w*u^2 -4355*x*z*w*u^2
 -10830*y*z*w*u^2 -4387*z^2*w*u^2 -1724*x*w^2*u^2 + 4077*y*w^2*u^2
 -599*z*w^2*u^2 -3939*w^3*u^2 -7416*x^2*u^3 + 1266*x*y*u^3 +
 721*y^2*u^3 + 5507*x*z*u^3 -8203*y*z*u^3 + 1151*z^2*u^3 +
 4578*x*w*u^3 -1694*y*w*u^3 -13458*z*w*u^3 + 15789*w^2*u^3 -2401*x*u^4
 + 13958*y*u^4 + 10376*z*u^4 + 2994*w*u^4 -14707*u^5,

8831*x^5 + 2215*x^4*y -2139*x^3*y^2 -13136*x^2*y^3 -9410*x*y^4
-2911*y^5 -14350*x^4*z -4584*x^3*y*z + 12425*x^2*y^2*z + 13298*x*y^3*z
-1753*y^4*z + 8039*x^3*z^2 + 11574*x^2*y*z^2 + 2324*x*y^2*z^2
-10902*y^3*z^2 -10707*x^2*z^3 + 8569*x*y*z^3 -9636*y^2*z^3 +
3676*x*z^4 + 14076*y*z^4 + 14165*z^5 + 4827*x^4*w -13349*x^3*y*w
-5871*x^2*y^2*w + 5031*x*y^3*w -15902*y^4*w -8272*x^3*z*w
-13014*x^2*y*z*w -5525*x*y^2*z*w + 8384*y^3*z*w + 4282*x^2*z^2*w
-15036*x*y*z^2*w -7743*y^2*z^2*w + 15804*x*z^3*w + 3831*y*z^3*w
-3492*z^4*w + 12894*x^3*w^2 + 3142*x^2*y*w^2 + 5585*x*y^2*w^2 +
6977*y^3*w^2 -15563*x^2*z*w^2 + 3833*x*y*z*w^2 + 15016*y^2*z*w^2 +
9672*x*z^2*w^2 + 6157*y*z^2*w^2 -14227*z^3*w^2 -1034*x^2*w^3 +
14727*x*y*w^3 + 8140*y^2*w^3 + 2642*x*z*w^3 -3200*y*z*w^3 +
3963*z^2*w^3 -10873*x*w^4 -2887*y*w^4 -1907*z*w^4 + 7819*w^5 +
13214*x^4*u + 3482*x^3*y*u -5195*x^2*y^2*u -10653*x*y^3*u -6476*y^4*u
+ 12748*x^3*z*u + 6315*x^2*y*z*u -14218*x*y^2*z*u -3450*y^3*z*u
-8196*x^2*z^2*u + 14293*x*y*z^2*u -8898*y^2*z^2*u -5053*x*z^3*u
-12124*y*z^3*u -1921*z^4*u -6955*x^3*w*u -8291*x^2*y*w*u
-5246*x*y^2*w*u -15624*y^3*w*u -2134*x^2*z*w*u + 12530*x*y*z*w*u +
15345*y^2*z*w*u -5749*x*z^2*w*u -11333*y*z^2*w*u -355*z^3*w*u
-8948*x^2*w^2*u + 6292*x*y*w^2*u + 2433*y^2*w^2*u -11835*x*z*w^2*u +
4385*y*z*w^2*u + 10253*z^2*w^2*u + 15040*x*w^3*u -10475*y*w^3*u +
5058*z*w^3*u -13954*w^4*u + 15053*x^3*u^2 -14196*x^2*y*u^2
-7639*x*y^2*u^2 + 835*y^3*u^2 -3985*x^2*z*u^2 -2174*x*y*z*u^2
-3214*y^2*z*u^2 -12883*x*z^2*u^2 + 6434*y*z^2*u^2 -15338*z^3*u^2
-1143*x^2*w*u^2 + 13141*x*y*w*u^2 -9968*y^2*w*u^2 -6389*x*z*w*u^2
-2483*y*z*w*u^2 + 1560*z^2*w*u^2 + 6141*x*w^2*u^2 -5480*y*w^2*u^2
-4189*z*w^2*u^2 + 8470*w^3*u^2 -5835*x^2*u^3 -13137*x*y*u^3 +
14762*y^2*u^3 -3402*x*z*u^3 -11311*y*z*u^3 + 805*z^2*u^3 +
6851*x*w*u^3 -14612*y*w*u^3 -9670*z*w*u^3 + 11910*w^2*u^3 + 3437*x*u^4
-12959*y*u^4 + 11375*z*u^4 + 9459*w*u^4 + 1537*u^5,

7390*x^5 + 7285*x^4*y -1676*x^3*y^2 + 8168*x^2*y^3 -4622*x*y^4
-3353*y^5 + 7025*x^4*z + 8519*x^3*y*z + 341*x^2*y^2*z + 14298*x*y^3*z
-12306*y^4*z + 1901*x^3*z^2 -11564*x^2*y*z^2 + 14217*x*y^2*z^2
-2288*y^3*z^2 + 10567*x^2*z^3 + 8382*x*y*z^3 -1763*y^2*z^3 +
6987*x*z^4 -13362*y*z^4 + 587*z^5 -10550*x^4*w + 7151*x^3*y*w
-14025*x^2*y^2*w -6558*x*y^3*w + 719*y^4*w -10588*x^3*z*w +
12486*x^2*y*z*w + 12094*x*y^2*z*w -1129*y^3*z*w + 14024*x^2*z^2*w +
1142*x*y*z^2*w -12185*y^2*z^2*w -5994*x*z^3*w + 9310*y*z^3*w
-3146*z^4*w -9347*x^3*w^2 -2007*x^2*y*w^2 -12969*x*y^2*w^2
-9006*y^3*w^2 + 12291*x^2*z*w^2 + 6728*x*y*z*w^2 + 6556*y^2*z*w^2 +
14389*x*z^2*w^2 -11058*y*z^2*w^2 + 4269*z^3*w^2 + 6614*x^2*w^3 +
10985*x*y*w^3 -15836*y^2*w^3 + 13602*x*z*w^3 + 11284*y*z*w^3
-15249*z^2*w^3 + 3052*x*w^4 -13568*y*w^4 + 2730*z*w^4 -3506*w^5
-12849*x^4*u + 5803*x^3*y*u -9361*x^2*y^2*u + 12906*x*y^3*u +
4675*y^4*u + 4663*x^3*z*u + 14048*x^2*y*z*u + 6151*x*y^2*z*u
-1331*y^3*z*u + 5016*x^2*z^2*u + 3005*x*y*z^2*u + 2983*y^2*z^2*u +
3010*x*z^3*u -9964*y*z^3*u + 7639*z^4*u + 15301*x^3*w*u
-3236*x^2*y*w*u + 14195*x*y^2*w*u + 11348*y^3*w*u -633*x^2*z*w*u +
122*x*y*z*w*u -14040*y^2*z*w*u -7990*x*z^2*w*u -15714*y*z^2*w*u
-438*z^3*w*u -15048*x^2*w^2*u + 14702*x*y*w^2*u -15728*y^2*w^2*u +
3388*x*z*w^2*u -14571*y*z*w^2*u -5572*z^2*w^2*u + 4200*x*w^3*u
-8768*y*w^3*u -14933*z*w^3*u -14896*w^4*u + 9568*x^3*u^2 +
3391*x^2*y*u^2 -848*x*y^2*u^2 + 15719*y^3*u^2 + 15721*x^2*z*u^2
-14173*x*y*z*u^2 -13279*y^2*z*u^2 -13299*x*z^2*u^2 -11163*y*z^2*u^2
-9582*z^3*u^2 + 8001*x^2*w*u^2 -14204*x*y*w*u^2 + 843*y^2*w*u^2 +
3855*x*z*w*u^2 + 10806*y*z*w*u^2 + 210*z^2*w*u^2 + 3977*x*w^2*u^2
-3234*y*w^2*u^2 + 5881*z*w^2*u^2 + 1925*w^3*u^2 + 9989*x^2*u^3
-9166*x*y*u^3 -15376*y^2*u^3 -5739*x*z*u^3 + 7883*y*z*u^3 +
2056*z^2*u^3 + 2350*x*w*u^3 -6259*y*w*u^3 + 6949*z*w*u^3
-12583*w^2*u^3 + 10848*x*u^4 -1824*y*u^4 + 4469*z*u^4 -8341*w*u^4 +
13895*u^5,

-11813*x^5 + 9489*x^4*y + 14278*x^3*y^2 -11450*x^2*y^3 + 11987*x*y^4
 -13646*y^5 -3449*x^4*z + 11444*x^3*y*z -12802*x^2*y^2*z + 406*x*y^3*z
 -9753*y^4*z -12592*x^3*z^2 -13958*x^2*y*z^2 -12987*x*y^2*z^2 +
 6951*y^3*z^2 -12033*x^2*z^3 + 10663*x*y*z^3 + 11446*y^2*z^3
 -13748*x*z^4 -13417*y*z^4 + 987*z^5 + 1969*x^4*w -11067*x^3*y*w
 -5272*x^2*y^2*w + 8918*x*y^3*w -9988*y^4*w + 5577*x^3*z*w +
 7094*x^2*y*z*w -5519*x*y^2*z*w + 10897*y^3*z*w + 2648*x^2*z^2*w +
 14672*x*y*z^2*w + 2044*y^2*z^2*w -1416*x*z^3*w + 3222*y*z^3*w +
 14031*z^4*w -15062*x^3*w^2 + 13434*x^2*y*w^2 + 7133*x*y^2*w^2 +
 4139*y^3*w^2 + 13841*x^2*z*w^2 -2619*x*y*z*w^2 + 5209*y^2*z*w^2 +
 13544*x*z^2*w^2 -1945*y*z^2*w^2 -6182*z^3*w^2 + 15172*x^2*w^3 +
 8719*x*y*w^3 + 5264*y^2*w^3 + 1424*x*z*w^3 -4698*y*z*w^3 +
 6251*z^2*w^3 + 3393*x*w^4 -2104*y*w^4 + 14640*z*w^4 -6031*w^5
 -12092*x^4*u + 1875*x^3*y*u + 1064*x^2*y^2*u + 14393*x*y^3*u +
 12772*y^4*u -14630*x^3*z*u -2938*x^2*y*z*u + 14816*x*y^2*z*u
 -2385*y^3*z*u + 284*x^2*z^2*u + 10505*x*y*z^2*u + 14556*y^2*z^2*u +
 13718*x*z^3*u -703*y*z^3*u + 354*z^4*u + 9217*x^3*w*u +
 10339*x^2*y*w*u -12779*x*y^2*w*u + 4419*y^3*w*u + 8394*x^2*z*w*u +
 13042*x*y*z*w*u -12412*y^2*z*w*u -1229*x*z^2*w*u -13697*y*z^2*w*u
 -10988*z^3*w*u + 7734*x^2*w^2*u + 6215*x*y*w^2*u -7595*y^2*w^2*u +
 5631*x*z*w^2*u + 2513*y*z*w^2*u -13625*z^2*w^2*u -6461*x*w^3*u +
 4389*y*w^3*u + 1100*z*w^3*u + 7932*w^4*u -14842*x^3*u^2 +
 131*x^2*y*u^2 -13348*x*y^2*u^2 + 13636*y^3*u^2 -2254*x^2*z*u^2 +
 597*x*y*z*u^2 + 5799*y^2*z*u^2 -6040*x*z^2*u^2 -4026*y*z^2*u^2
 -13246*z^3*u^2 -5686*x^2*w*u^2 + 5191*x*y*w*u^2 -2907*y^2*w*u^2 +
 13538*x*z*w*u^2 -8731*y*z*w*u^2 -12854*z^2*w*u^2 + 8238*x*w^2*u^2 +
 10860*y*w^2*u^2 -14083*z*w^2*u^2 + 8202*w^3*u^2 + 13534*x^2*u^3 +
 7313*x*y*u^3 + 14417*y^2*u^3 -12403*x*z*u^3 + 12944*y*z*u^3
 -15072*z^2*u^3 -12367*x*w*u^3 -11859*y*w*u^3 + 2978*z*w*u^3
 -11267*w^2*u^3 + 9735*x*u^4 + 1797*y*u^4 + 2525*z*u^4 -3613*w*u^4 +
 15433*u^5,

13932*x^5 -3015*x^4*y + 2891*x^3*y^2 + 7893*x^2*y^3 -7041*x*y^4
-10355*y^5 + 15868*x^4*z + 11811*x^3*y*z + 400*x^2*y^2*z +
11065*x*y^3*z -15262*y^4*z -12454*x^3*z^2 -12700*x^2*y*z^2
-4401*x*y^2*z^2 -12876*y^3*z^2 -4497*x^2*z^3 -9209*x*y*z^3
-5563*y^2*z^3 -8422*x*z^4 + 10391*y*z^4 -10961*z^5 -9833*x^4*w
-1975*x^3*y*w + 9184*x^2*y^2*w -6855*x*y^3*w + 419*y^4*w + 577*x^3*z*w
-5057*x^2*y*z*w -15397*x*y^2*z*w + 10625*y^3*z*w -7966*x^2*z^2*w
-1465*x*y*z^2*w + 7610*y^2*z^2*w + 8586*x*z^3*w + 6428*y*z^3*w +
14230*z^4*w -1768*x^3*w^2 -9706*x^2*y*w^2 + 7700*x*y^2*w^2
-1368*y^3*w^2 + 15020*x^2*z*w^2 + 6099*x*y*z*w^2 -161*y^2*z*w^2 +
2320*x*z^2*w^2 + 15359*y*z^2*w^2 -13037*z^3*w^2 + 11484*x^2*w^3 +
6150*x*y*w^3 + 13404*y^2*w^3 + 3063*x*z*w^3 -15461*y*z*w^3 +
2443*z^2*w^3 + 6891*x*w^4 -3775*y*w^4 -6715*z*w^4 + 37*w^5 -3356*x^4*u
-6138*x^3*y*u + 8641*x^2*y^2*u + 13250*x*y^3*u + 4488*y^4*u +
675*x^3*z*u -6556*x^2*y*z*u -6244*x*y^2*z*u + 9262*y^3*z*u
-128*x^2*z^2*u -10355*x*y*z^2*u -10848*y^2*z^2*u + 3827*x*z^3*u +
11006*y*z^3*u + 1445*z^4*u -13156*x^3*w*u -14898*x^2*y*w*u +
1284*x*y^2*w*u + 2826*y^3*w*u + 462*x^2*z*w*u -11753*x*y*z*w*u +
14310*y^2*z*w*u -11730*x*z^2*w*u + 15312*y*z^2*w*u -969*z^3*w*u +
4812*x^2*w^2*u -586*x*y*w^2*u + 5923*y^2*w^2*u + 14698*x*z*w^2*u
-7301*y*z*w^2*u -12382*z^2*w^2*u -6999*x*w^3*u + 223*y*w^3*u
-3741*z*w^3*u -12091*w^4*u -13631*x^3*u^2 + 10595*x^2*y*u^2 +
13356*x*y^2*u^2 -6214*y^3*u^2 + 1515*x^2*z*u^2 + 13229*x*y*z*u^2 +
15434*y^2*z*u^2 + 4328*x*z^2*u^2 -1286*y*z^2*u^2 + 8098*z^3*u^2 +
5773*x^2*w*u^2 -780*x*y*w*u^2 + 6862*y^2*w*u^2 -11285*x*z*w*u^2 +
15707*y*z*w*u^2 -11018*z^2*w*u^2 -9376*x*w^2*u^2 + 11675*y*w^2*u^2 +
9255*z*w^2*u^2 + 5936*w^3*u^2 + 10707*x^2*u^3 -4274*x*y*u^3 +
5350*y^2*u^3 -1712*x*z*u^3 + 10424*y*z*u^3 + 11711*z^2*u^3
-14094*x*w*u^3 + 3425*y*w*u^3 + 11934*z*w*u^3 -4174*w^2*u^3
-8665*x*u^4 -1697*y*u^4 -11921*z*u^4 + 4691*w*u^4 -7911*u^5 ); ";

T.IsHomog := True;

Append(AllTests, T);


------------------------------------------------------------
PrintLn "Finished reading BenchmarkSrc.cocoa";

Define BenchmarkMan()
  PrintLn "
-- run like this:
  BenchmarkCheckDir();
  Info := Record[];                    RunTests(AllTests, Info);
  Info := Record[O:=\"DegLex\"];        RunTests(AllTests, Info);
  Info := Record[Char:=0];              RunTests(AllTests, Info);
  Info := Record[Char:=0, O:=\"DegLex\"];  RunTests(AllTests, Info);
-- To create just one test:
  Info := Record[Char:=101, O:=\"Lex\", Homogenize:=False];
    RunTests([T In AllTests | T.Name=\"GraphCol1\"], Info);
-- default values:
Info := Record(Char:=32003, O:=\"DegRevLex\", Homogenize:=True);
";
EndDefine; -- BenchmarkMan

Define BenchmarkCheckDir()
  WantedPath := "/src/server/benchmarks";
  Path := GetEnv("PWD");
  If (Not IsIn(WantedPath,  Path)) Or
    Sum(Last(Path, Len(WantedPath))) <> WantedPath    Then
    PrintLn "NOTE! You should run this in CoCoALib-0.n"+WantedPath;
    PrintLn "You are in ", Path;
    Return;
  EndIf;
  Catch FF := OpenOFile("inputs/test-dir", "w") In E EndCatch;
  If Type(E)=ERROR Then
    PrintLn "directory \"inputs/\" does not exists or it isn't writable";
    PrintLn "run \" mkdir inputs \"";
    Return;
  Else
    PrintLn "Just a test to see if directory \"inputs/\" exixts" On FF;
    Close(FF);
  EndIf;
  PrintLn "-- Path seems correct: ";
  Print   "-- ", Path;
EndDefine; -- BenchmarkCheckDir

----------------------------------------------------------------------
BenchmarkMan();
BenchmarkCheckDir();
----------------------------------------------------------------------

