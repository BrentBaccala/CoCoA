TestCount := 0;

define TEST_ASSERT(A,B)
  toplevel TestCount;
  toplevel PrintInfo;
  TestCount := TestCount+1;
  If A<>B Then
    error("TEST: " + Sprint(A) + " <> " + Sprint(B));
  endif;
--  if PrintInfo then print "."; EndIf;
enddefine; -- TEST_ASSERT

T0 := CpuTime();

----------------------------------------------------------------------
M:=3;  Use R::=QQ[x[1..M,1..M]], DegLex;
J := ***Ideal(
	      x[2,3]x[3,1] ,
	      x[1,2]x[1,3] - x[1,3]x[1,3],
	      x[1,1]x[3,3] ,
	      x[2,3]x[1,2] - x[2,1]x[1,3]
	      )***;
TEST_ASSERT(Radical(J),
ideal(x[2,3]*x[3,1], x[1,3]*x[2,1] -x[1,3]*x[2,3],
      x[1,2]*x[2,3] -x[1,3]*x[2,3], x[1,2]*x[1,3] -x[1,3]^2, x[1,1]*x[3,3]));

----------------------------------------------------------------------
Use R::=QQ[b,c,d,e], DegLex;
J := ideal([d*e, b*e -c*d, b*c -c^2, -b^2 +b*c]);
TEST_ASSERT(Radical(J), ideal(b -c, c*e, c*d, d*e));

----------------------------------------------------------------------
M:=6;  Use R::=QQ[x[1..M,1..M]], DegLex;
-- commented out because a bit too long for automatic use
J := ***Ideal(
	      x[2,4]x[3,6] - x[2,6]x[3,4],
	      x[1,3]x[2,4] - x[1,4]x[2,3],
	      x[1,2]x[4,3] - x[1,3]x[4,2],
	      x[1,2]x[5,4] - x[1,4]x[5,2],
	      x[2,4]x[5,5] - x[2,5]x[5,4],
	      x[1,1]x[3,4] - x[1,4]x[3,1],
	      x[2,3]x[6,5] - x[2,5]x[6,3]   )***;

RadJ := ideal(x[2,4]*x[5,5] -x[2,5]*x[5,4],
  x[2,4]*x[3,6] -x[2,6]*x[3,4],  x[2,3]*x[6,5] -x[2,5]*x[6,3],
  x[1,3]*x[2,4] -x[1,4]*x[2,3],  x[1,2]*x[5,4] -x[1,4]*x[5,2],
  x[1,2]*x[4,3] -x[1,3]*x[4,2],  x[1,1]*x[3,4] -x[1,4]*x[3,1],
  x[2,5]*x[3,6]*x[5,4] -x[2,6]*x[3,4]*x[5,5],
  x[1,3]*x[2,5]*x[5,4] -x[1,4]*x[2,3]*x[5,5],
  x[1,3]*x[2,6]*x[3,4] -x[1,4]*x[2,3]*x[3,6],
  x[1,3]*x[4,2]*x[5,4] -x[1,4]*x[4,3]*x[5,2],
  x[1,4]*x[2,3]*x[4,2]*x[5,5] -x[1,4]*x[2,5]*x[4,3]*x[5,2],
  x[1,4]*x[2,3]*x[4,2]*x[5,4] -x[1,4]*x[2,4]*x[4,3]*x[5,2],
  x[1,2]*x[2,6]*x[3,4]*x[5,5] -x[1,4]*x[2,5]*x[3,6]*x[5,2],
  x[1,2]*x[1,4]*x[2,3]*x[5,5] -x[1,3]*x[1,4]*x[2,5]*x[5,2],
  x[1,1]*x[1,4]*x[2,3]*x[3,6] -x[1,3]*x[1,4]*x[2,6]*x[3,1],
  x[1,4]*x[2,5]*x[4,2]*x[5,5]*x[6,3] -x[1,4]*x[2,5]*x[4,3]*x[5,2]*x[6,5],
  x[1,4]*x[2,4]*x[4,3]*x[5,2]*x[6,5] -x[1,4]*x[2,5]*x[4,2]*x[5,4]*x[6,3],
  x[1,2]*x[1,4]*x[2,5]*x[5,5]*x[6,3] -x[1,3]*x[1,4]*x[2,5]*x[5,2]*x[6,5],
  x[1,1]*x[1,4]*x[2,5]*x[3,6]*x[6,3] -x[1,3]*x[1,4]*x[2,6]*x[3,1]*x[6,5],
  x[1,1]*x[1,4]*x[2,5]*x[3,6]*x[5,2] -x[1,2]*x[1,4]*x[2,6]*x[3,1]*x[5,5],
  x[1,4]*x[2,6]*x[3,4]*x[4,2]*x[5,5]*x[6,3] -x[1,4]*x[2,6]*x[3,4]*x[4,3]*x[5,2]*x[6,5],
  x[1,3]*x[1,4]*x[2,6]*x[3,1]*x[5,4]*x[6,5] -x[1,4]^2*x[2,6]*x[3,1]*x[5,5]*x[6,3],
  x[1,2]*x[1,4]*x[2,6]*x[3,1]*x[5,5]*x[6,3] -x[1,3]*x[1,4]*x[2,6]*x[3,1]*x[5,2]*x[6,5],
  x[1,4]*x[2,6]*x[3,1]*x[4,2]*x[5,5]*x[6,3] -x[1,4]*x[2,6]*x[3,1]*x[4,3]*x[5,2]*x[6,5]);

-- commented out because a bit too long for automatic use
-- Radical(J) = RadJ;  Radical(RadJ) = RadJ;

----------------------------------------------------------------------
Use P ::= QQ[x[1..4]];

I:=Ideal(12*x[3]*x[4]*x[1]*x[2] - 15*x[4]^2*x[2]^2 + x[3]^2*x[1] +
	 8*x[3]*x[4]*x[1] - 2*x[3]*x[4]*x[2] - 4*x[4]^2*x[2],
	 3*x[3]^2*x[1]^2 - 3*x[4]^2*x[2]^2 + x[3]^2*x[1] +
	 2*x[3]*x[4]*x[1] - 2*x[3]*x[4]*x[2] - x[4]^2*x[2],
	 108*x[4]^3*x[2]^3 - 9*x[3]*x[4]^2*x[2]^2 - 72*x[4]^3*x[2]^2 -
	 x[3]^3*x[1] + 64*x[3]*x[4]^2*x[1] + 2*x[3]^2*x[4]*x[2] -
	 60*x[3]*x[4]^2*x[2] -32*x[4]^3*x[2]);

RadJ :=
***Ideal(x[1]x[2]^2x[4] - (8/9)x[1]^2x[3] + (2/9)x[1]x[2]x[3]
	 + (4/9)x[1]x[2]x[4] - ( 4/9)x[2]^2x[4] -(2/9)x[1]x[3] - (1/9)x[2]x[4],
  x[1]^2x[2]x[3] - (4/9)x[1]^2x[3] +
(4/9)x[1]x[2]x[3] + (2/9)x[1]x[2]x[4] - (8/9)x[2]^2x[4] -
(1/9)x[1]x[3] - (2/9)x[2]x[4],
  x[1]x[2]x[3]x[4] - (5/4)x[2]^2x[4]^2 +
(1/12)x[1]x[3]^2 + (2/3)x[1]x[3]x[4] - ( 1/6)x[2]x[3]x[4] -
(1/3)x[2]x[4]^2,
  x[1]^2x[3]^2 - x[2]^2x[4]^2 + (1/3)x[1]x[3]^2 +
(2/3)x[1]x[3]x[4] - (2/3)x[2]x[3]x[4] - (1/3)x[2]x[4]^2,
  x[2]^3x[4]^2
+ (1/9)x[1]x[2]x[3]^2 - (2/9)x[2]^2x[3]x[4] - (2/3)x[2]^2x[4]^2 +
(2/27)x[1]x[3]^2 + (16/27)x[1]x[3]x[4] - (16/27)x[2]x[3]x[4] -
(8/27)x[2]x[4]^2) ***;

TEST_ASSERT(radical(I), RadJ);
TEST_ASSERT(radical(RadJ), RadJ);

----------------------------------------------------------------------
--  TEST 02 :
--  Test := Record[Id := "radical_02", Descr := "T2Test"];
Use ZZ/(32003)[x[1..4]];
I:=
Ideal(
x[2]^4 + x[1]^3*x[3] -  2*x[1]*x[3]^3 + x[1]^2 + x[2]*x[3],
-  x[1]^2*x[2]^2 -  x[2]^3*x[3] -  3*x[2]*x[3]^3 -  x[3]^3,
x[2]^4 -  2*x[1]*x[2]*x[3]^2 -  x[1]^2*x[3] + 2*x[2]^2*x[3]);

RadJ := 
***Ideal(x[2]^4 + x[1]^3*x[3] - 2*x[1]*x[3]^3 + x[1]^2 + x[2]*x[3],
  -x[1]^2*x[2]^2 - x[2]^3*x[3] - 3*x[2]*x[3]^3 - x[3]^3,
  x[2]^4 -2*x[1]*x[2]*x[3]^2 - x[1]^2*x[3] + 2*x[2]^2*x[3],
  x[2]^30 -993*x[2]^29 + 7940*x[2]^28 + 12659*x[2]^27 + 8774*x[2]^26 -
500*x[2]^25 + 1266*x[2]^24 - 3594*x[2]^23 - 6212*x[2]^22 -
8032*x[2]^21 + 737*x[2]^20 + 12167*x[2]^19 + 14825*x[2]^18 +
4633*x[2]^17 - 13782*x[2]^16 + 3147*x[2]^15 + 10094*x[2]^14 +
14552*x[2]^13 - 12563*x[2]^12 - 1781*x[2]^11 - 12780*x[2]^10 +
2139*x[2]^9 - 2766*x[2]^8 - 13986*x[2]^7 - 487*x[2]^6 - 5195*x[2]^5 +
394*x[2]^4 + 2096*x[2]^3 - 842*x[2]^2 - 6203*x[2],
  x[1]^30 -6031*x[1]^29 - 9808*x[1]^28 + 15432*x[1]^27 + 8298*x[1]^26 +
10183*x[1]^25 - 12754*x[1]^24 + 9516*x[1]^23 - 1465*x[1]^22 -
2153*x[1]^21 + 2078*x[1]^20 - 91*x[1]^19 + 1238*x[1]^18 + 382*x[1]^17
+ 5152*x[1]^16 - 4819*x[1]^15 - 10180*x[1]^14 + 15246*x[1]^13 +
12691*x[1]^12 - 1049*x[1]^11 - 8004*x[1]^10 + 14757*x[1]^9 +
1966*x[1]^8 + 8621*x[1]^7 - 8666*x[1]^6 - 14313*x[1]^5 - 11811*x[1]^4
+ 10360*x[1]^3 - 14808*x[1]^2 + 6253*x[1],
  x[3]^30 +  2716*x[3]^29 -
13509*x[3]^28 + 12004*x[3]^27 - 5997*x[3]^26 - 14078*x[3]^25 +
12648*x[3]^24 - 3187*x[3]^23 + 3848*x[3]^22 - 6570*x[3]^21 +
11902*x[3]^20 + 9205*x[3]^19 + 4796*x[3]^18 - 9673*x[3]^17 +
12422*x[3]^16 + 14867*x[3]^15 + 654*x[3]^14 + 15820*x[3]^13 +
8496*x[3]^12 + 12980*x[3]^11 + 5476*x[3]^10 + 4205*x[3]^9 -
15956*x[3]^8 - 10724*x[3]^7 - 2919*x[3]^6 - 4935*x[3]^5 + 9924*x[3]^4
- 14554*x[3]^3 + 12653*x[3]^2 - 10420*x[3])***;

TEST_ASSERT($radical.RadicalOfUnmixed(I), RadJ);
TEST_ASSERT(radical(I), RadJ);
TEST_ASSERT(Radical(RadJ), RadJ);

print "Radical: done!";
